%ifndef _SHIFT_REGISTER_CCT_
%define _SHIFT_REGISTER_CCT_

// Shift Unit - 8-bit
#defunit SHIFT_UNIT_8
#input $pulse, $dir_is_right, @value[8], $carry_in
#output $ready, @value_out[8], $carry_out

; Shift Right
$carry_out = DELAY{2} @value[0]
@value_out[0:6] = AND{7} (DELAY $pulse), (DELAY $dir_is_right), (DELAY @value[1:7])
@value_out[7] = AND (DELAY $pulse), (DELAY $dir_is_right), (DELAY $carry_in)

; Shift Left
@value_out[0] = AND (DELAY $pulse), (NOT $dir_is_right), (DELAY $carry_in)
@value_out[1:7] = AND{7} (DELAY $pulse), (NOT $dir_is_right), (DELAY @value[0:6])
$carry_out = DELAY{2} @value[7]

$ready = DELAY{2} $pulse

#endunit


//
// Variable distance 8-bit shifter
//
#defunit SHIFT_RIGHT_N_8
#input $pulse, @count[3], @value[8], $carry_in
#output $ready, @value_out[8], $carry_out

#array count_enable 8

@count_enable = DEMUX{3} 1, @count

%assign i 0
%rep 8
 %assign j i
 %rep 8-i
@value_out[i] = AND (DELAY $pulse), @count_enable[j], (DELAY @value[j])
 %assign j j+1
 %endrep
%assign i i+1
%endrep

%assign i 1
%rep 7
$carry_out = AND (DELAY $pulse), @count_enable[i], (DELAY @value[i-1])
@value_out[8-i] = AND (DELAY $pulse), @count_enable[i], (DELAY $carry_in)
%assign i i+1
%endrep

$ready = DELAY{2} $pulse

#endunit

%macro def_shift_left_n 2
#defunit SHIFT_LEFT_N_ %+ %1
#input $pulse, @count[%2], @value[%1], $carry_in
#output $ready, @value_out[%1], $carry_out

#array count_enable %1

$ready = DELAY{2} $pulse
@count_enable = DEMUX{%2} $pulse, @count

%assign i 0
%rep %1
  %assign j 0
  %rep i
@value_out[j] = AND @count_enable[i], (DELAY $carry_in)
    %assign j j+1
  %endrep
  %rep %1-i
    %assign src ((j-i) % %1)
@value_out[j] = AND @count_enable[i], (DELAY @value[src])
    %assign j j+1
  %endrep
  %if i != 0
$carry_out = AND @count_enable[i], (DELAY @value[%1-i])
  %endif
  %assign i i+1
%endrep

#endunit
%endmacro

;
; Templated left rotate unit
;
%macro def_rotate_left_1 2
#defunit ROTATE_LEFT_1_ %+ %1
#input $pulse, @value[%1]
#output $ready, @value_out[%1]

$ready = DELAY{1} $pulse
%assign i 0
%rep %1
  %assign k ((i+1) % %1)
  @value_out[i] = DELAY  @value[k]
%assign i i+1
%endrep

#endunit
%endmacro


;
; Templated left rotate unit (variable count)
;
%macro def_rotate_left_n 2
#defunit ROTATE_LEFT_N_ %+ %1
#input $pulse, @count[%2], @value[%1]
#output $ready, @value_out[%1]

%assign countmax 1<<%2
#array count_enable countmax

$ready = DELAY{2} $pulse
@count_enable = DEMUX{%2} $pulse, @count
%assign i 0
%rep %1
  %assign j 0
  %rep %1
    %assign k ((i+j) % %1)
    %assign l ((countmax - j) % countmax)
    @value_out[i] = AND @count_enable[l], (DELAY  @value[k])
  %assign j j+1
  %endrep
%assign i i+1
%endrep

#endunit
%endmacro

def_shift_left_n 16, 4
def_shift_left_n 32, 5
def_rotate_left_n 16, 4
def_rotate_left_n 32, 5
def_rotate_left_n 33, 5

#testcase 10 "Shift Left 32 - None"
#array _out 32
$rdy, @_out, $carry = SHIFT_LEFT_N_32 (DELAY 1), 0[0:4], 0x01234567[0:31], 0
#testassert $rdy @_out[31:0] 0x01234567[31:0]
#testassert $rdy $carry 0
#testcomplete $rdy
#endtestcase

#testcase 10 "Shift Left 32 - 31"
#array _out 32
$rdy, @_out, $carry = SHIFT_LEFT_N_32 (DELAY 1), 31[0:4], 0x01234567[0:31], 0
#testassert $rdy @_out[31:0] 0x80000000[31:0]
#testassert $rdy $carry 1
#testcomplete $rdy
#endtestcase

#testcase 10 "Shift Left 32 - 16 Fill"
#array _out 32
$rdy, @_out, $carry = SHIFT_LEFT_N_32 (DELAY 1), 16[0:4], 0x01234567[0:31], 1
#testassert $rdy @_out[31:0] 0x4567FFFF[31:0]
#testassert $rdy $carry 1
#testcomplete $rdy
#endtestcase

#testcase 10 "Rotate Left 32 - None"
#array _out 32
$rdy, @_out = ROTATE_LEFT_N_32 (DELAY 1), 0[0:4], 0x01234567[0:31]
#testassert $rdy @_out[31:0] 0x01234567[31:0]
#testcomplete $rdy
#endtestcase

#testcase 10 "Rotate Left 32 - 28"
#array _out 32
$rdy, @_out = ROTATE_LEFT_N_32 (DELAY 1), 4[0:4], 0x01234567[0:31]
#testassert $rdy @_out[31:0] 0x12345670[31:0]
#testcomplete $rdy
#endtestcase

%endif

; vim: ft=logiccircuit
