%ifndef _SHIFT_REGISTER_CCT_
%define _SHIFT_REGISTER_CCT_

%define USE_LOWLEVEL_ROTSHIFTS	0

;
; Templated left shift
;
%macro def_shift_1 1
#defunit SHIFT_LEFT_1_ %+ %1
#input $pulse, @value[%1], $carry_in
#output $ready, @value_out[%1], $carry_out
$ready = DELAY{1} $pulse
@value_out[0] = DELAY $carry_in
@value_out[1:%1-1],$carry_out = DELAY @value[0:%1-1]
#endunit

#defunit SHIFT_RIGHT_1_ %+ %1
#input $pulse, @value[%1], $carry_in
#output $ready, @value_out[%1], $carry_out
$ready, @value_out[%1-1:0], $carry_out = SHIFT_LEFT_1_ %+ %1 $pulse, @value[%1-1:0], $carry_in
#endunit
%endmacro

def_shift_1 16
def_shift_1 32
def_shift_1 64

// Shift Unit - 8-bit
#defunit SHIFT_UNIT_8
#input $pulse, $dir_is_right, @value[8], $carry_in
#output $ready, @value_out[8], $carry_out

$dir_L = NOT   $dir_is_right
$dir_R = DELAY $dir_is_right

$_pulse = DELAY $_pulse
#array dval 8
@dval = DELAY @value
$dcarry = DELAY $carry_in

; Shift Right
$carry_out = AND $_pulse, $dir_R, @dval[0]
@value_out[0:7] = AND{8} $_pulse, $dir_R, @dval[1:7], $dcarry

; Shift Left
@value_out[0:7] = AND{8} $_pulse, $dir_L, $dcarry, @dval
$carry_out = AND $_pulse, $dir_L, @dval[7]

$ready = DELAY{2} $pulse

#endunit


//
// Variable distance 8-bit shifter
//
#defunit SHIFT_RIGHT_N_8
#input $pulse, @count[3], @value[8], $carry_in
#output $ready, @value_out[8], $carry_out

#array count_enable 8

@count_enable = DEMUX{3} 1, @count

%assign i 0
%rep 8
 %assign j i
 %rep 8-i
@value_out[i] = AND (DELAY $pulse), @count_enable[j], (DELAY @value[j])
 %assign j j+1
 %endrep
%assign i i+1
%endrep

%assign i 1
%rep 7
$carry_out = AND (DELAY $pulse), @count_enable[i], (DELAY @value[i-1])
@value_out[8-i] = AND (DELAY $pulse), @count_enable[i], (DELAY $carry_in)
%assign i i+1
%endrep

$ready = DELAY{2} $pulse

#endunit

%macro def_shift_left_n 2
#defunit SHIFT_LEFT_N_ %+ %1
#input $pulse, @count[%2], @value[%1], $carry_in
#output $ready, @value_out[%1], $carry_out

%if USE_LOWLEVEL_ROTSHIFTS
#array count_enable %1

$ready = DELAY{2} $pulse
@count_enable = DEMUX{%2} $pulse, @count

#array dval %1
@dval = DELAY @value
$dcarry = DELAY $carry_in

%assign i 0
%rep %1
  %assign j 0
  %rep i
@value_out[j] = AND @count_enable[i], $dcarry
    %assign j j+1
  %endrep
  %rep %1-i
    %assign src ((j-i) % %1)
@value_out[j] = AND @count_enable[i], @dval[src]
    %assign j j+1
  %endrep
  %if i != 0
$carry_out = AND @count_enable[i], @dval[%1-i]
  %endif
  %assign i i+1
%endrep

%else

%assign valmax %1 - 1
%assign countmax 1<<%2
%assign countlimit countmax-1
$NULL, $carry_out = DELAY (DELAY $pulse), (MUX{%2,1} $pulse, @count, 0,@value[valmax:valmax-(countlimit-1)])
$ready, @value_out = DELAY (DELAY $pulse), (MUX{%2,%1} $pulse, @count, @value[0:valmax] \ 
%assign n 1
%rep countmax-1
%assign lowlimit valmax-n
	, $carry_in*n,@value[0:lowlimit] \ 
%assign n n+1
%endrep
)

%endif

#endunit
%endmacro

;
; Templated left rotate unit
;
%macro def_rotate_left_1 2
#defunit ROTATE_LEFT_1_ %+ %1
#input $pulse, @value[%1]
#output $ready, @value_out[%1]

$ready = DELAY{1} $pulse
@value_out = DELAY @value[%1-1],@value[0:%1-2]

#endunit
%endmacro


;
; Templated left rotate unit (variable count)
;
%macro def_rotate_left_n 2
#defunit ROTATE_LEFT_N_ %+ %1
#input $pulse, @count[%2], @value[%1]
#output $ready, @value_out[%1]

%assign countvals 1<<%2

%if USE_LOWLEVEL_ROTSHIFTS
#array count_enable countvals

#array dval %1
@dval = DELAY @value

$ready = DELAY{2} $pulse
@count_enable = DEMUX{%2} $pulse, @count
@value_out = AND{%1} @count_enable[0], @dval
%assign valmax %1 - 1
%assign countmax countvals - 1
%assign n 1
%rep countvals-1
	@value_out = AND{%1} @count_enable[n], @dval[valmax-(n-1):valmax],@dval[0:valmax-n]
%assign n n+1
%endrep

%else
// Rotate left
// 0: @value[0:valmax]
// 1: @value[valmax],@value[0:valmax-1]
// 2: @value[valmax-1:valmax],@value[0:valmax-2]
// n: @value[valmax-(n-1):valmax],@value[0:valmax-n]
%assign valmax %1 - 1
%assign countmax countvals - 1
$ready, @value_out = DELAY (DELAY $pulse), (MUX{%2,%1} $pulse, @count, @value[0:valmax] \ 
%assign n 1
%rep countvals-1
	, @value[valmax-(n-1):valmax],@value[0:valmax-n] \ 
%assign n n+1
%endrep
)
%endif

#endunit
%endmacro

def_shift_left_n 16, 4
def_shift_left_n 32, 5
def_rotate_left_n 16, 4
def_rotate_left_n 32, 5
def_rotate_left_n 33, 5

#testcase 10 "Shift Left 32 - None"
#array _out 32
$rdy, @_out, $carry = SHIFT_LEFT_N_32 (DELAY 1), 0[0:4], 0x01234567[0:31], 0
#testassert $rdy @_out[31:0] 0x01234567[31:0]
#testassert $rdy $carry 0
#testcomplete $rdy
#endtestcase

#testcase 10 "Shift Left 32 - 31"
#array _out 32
$rdy, @_out, $carry = SHIFT_LEFT_N_32 (DELAY 1), 31[0:4], 0x01234567[0:31], 0
#testassert $rdy @_out[31:0] 0x80000000[31:0]
#testassert $rdy $carry 1
#testcomplete $rdy
#endtestcase

#testcase 10 "Shift Left 32 - 16 Fill"
#array _out 32
$rdy, @_out, $carry = SHIFT_LEFT_N_32 (DELAY 1), 16[0:4], 0x01234567[0:31], 1
#testassert $rdy @_out[31:0] 0x4567FFFF[31:0]
#testassert $rdy $carry 1
#testcomplete $rdy
#endtestcase

#testcase 10 "Rotate Left 32 - None"
#array _out 32
$rdy, @_out = ROTATE_LEFT_N_32 (DELAY 1), 0[0:4], 0x01234567[0:31]
#testassert $rdy @_out[31:0] 0x01234567[31:0]
#testcomplete $rdy
#endtestcase

#testcase 10 "Rotate Left 32 - 4"
#array _out 32
$rdy, @_out = ROTATE_LEFT_N_32 (DELAY 1), 4[0:4], 0x01234567[0:31]
#testassert $rdy @_out[31:0] 0x12345670[31:0]
#testcomplete $rdy
#endtestcase

#testcase 10 "Rotate Left 32 - 3"
#array _out 32
$rdy, @_out = ROTATE_LEFT_N_32 (DELAY 1), 3[0:4], 0x81234567[0:31]
#testassert $rdy @_out[31:0] 0x091A2B3C[31:0]
#testcomplete $rdy
#endtestcase

#testcase 10 "Rotate Left 33 - 4"
#array _out 33
$rdy, @_out = ROTATE_LEFT_N_33 (DELAY 1), 4[0:4], 0x11234567[0:32]
#testassert $rdy @_out[0:32] 0x112345670[0:32]
#testcomplete $rdy
#endtestcase

#testcase 10 "Rotate Left 33 - 3"
#array _out 33
$rdy, @_out = ROTATE_LEFT_N_33 (DELAY 1), 3[0:4], 0x81234567[0:32]
#testassert $rdy @_out[32:0] 0x091A2B3A[32:0]
#testcomplete $rdy
#endtestcase

%endif

; vim: ft=logiccircuit
