; Latch
; Usage: LATCH <clear>, <set>
; - pulse:	Signal to propogate for delays
; - clear:	Set to 1 to reset the latch to 0
; - set:	Set to 1 to set the latch to 1
; Delays:
; - Writing: 3
; - Reading: 0
%define delayof_LATCH	3
#defunit LATCH
#input $pulse, $clr, $set
#output $ready, $ret

; Offset second Flip-Flop
//$_set = DELAY $set
//$_clr = DELAY $clr
$_set = HOLD{2} $set
$_clr = HOLD{2} $clr

//#display (HOLD{2} $pulse) "$set, $clr, $_set, $_clr" $set, $clr, $_set, $_clr

; Have two latches (1 cycle out of sync) to stop flipping
//$value = AND (NOT $clr), (OR $value, $set)
$value2 = AND (NOT $_clr), (OR $value2, $_set)

$ret = OR $value, $value2
$ready = DELAY{5} $pulse
//#display $ready "$value, $value2" $value, $value2

#endunit

; Memory Cell
; Usage: MEMORY_CELL <enable>, <write>, <value>
; - enable:	Set to 1 to access the cell
; - write:	Set to 1 to set the cell
; - value:	New cell contents (ignored if <write> is not set)
; Returns:
; - $ready:	Delayed $enable signal, raised when data is ready
; - $ret:	Cell value
; Delays:
; - Writing: 6
; - Reading: 6
%define delayof_MEMORY_CELL	6

#defunit MEMORY_CELL
#input $enable, $write, $datain	; set input lines
#output $ready, $ret	; Set output lines

$reset = AND (DELAY $enable), (DELAY $write), (NOT $datain)
$set = AND (DELAY $enable), (DELAY $write), (DELAY $datain)

//#display 1 "$reset, $set" $reset, $set

$_ready, $value = LATCH (DELAY{2} $enable), $reset, $set

$ret = AND $_ready, $value
$ready = DELAY $_ready

#endunit
