// Full Subtractor
// - Delay of 2
#defunit SUBTRACTOR
#input $val1, $val2, $borrow_in
#output $ret, $borrow_out

$_ret = XOR $val1, $val2, $carry_in
// Exploit the OR nature of assignment in place of a gate (it's faster)
$borrow_out = AND (DELAY $carry_in), (NXOR $val1, $val2)
$borrow_out = AND (NOT $val1), (DELAY $val2)

$ret = DELAY $_ret	; Synchronise outputs

#endunit

// 8-Bit Subtractor
// - Delay of 17 (2 * SUBTRACTOR + 1)
#defunit SUBTRACTOR_8BIT
#input $enable, @val1[8], @val2[8], $borrow_in
#output $ready, @ret[8], $borrow_out
#array _ret 8
#array borrow 9

@borrow[0] = $borrow_in

%assign i 0
%assign j 1
%rep 8
@_ret[i], @borrow[j] = ADDER (DELAY @val1[i]), (NOT @val2[i]), (NOT @borrow[i])
%assign i i+1
%assign j j+1
%endrep

@ret[0] = AND (DELAY{16} $enable), (DELAY{14} @_ret[0])
@ret[1] = AND (DELAY{16} $enable), (DELAY{12} @_ret[1])
@ret[2] = AND (DELAY{16} $enable), (DELAY{10} @_ret[2])
@ret[3] = AND (DELAY{16} $enable), (DELAY{ 8} @_ret[3])
@ret[4] = AND (DELAY{16} $enable), (DELAY{ 6} @_ret[4])
@ret[5] = AND (DELAY{16} $enable), (DELAY{ 4} @_ret[5])
@ret[6] = AND (DELAY{16} $enable), (DELAY{ 2} @_ret[6])
@ret[7] = AND (DELAY{16} $enable), @_ret[7]

$borrow_out = AND (DELAY{16} $enable), @borrow[8]

$ready = DELAY{17} $enable

#endunit
