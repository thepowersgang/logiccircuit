// 8-bit RISC CPU
// - Memory Bus
// By John Hodge (thePowersGang)
// Designed in LogicCircuit

//%include "../memory_bank.cct"

%include "rom.cct"

// TODO: Replace size with byte mask

#defunit MEMORY_SPACE
#input $enable, @addr[32], $data_write, @data_input[32], @size[2]
#output $ready, @data_output[32], $fault_ac

$size_32 = AND (NOT   @size[1]), (NOT   @size[0])
$size_16 = AND (NOT   @size[1]), (DELAY @size[0])
$size_8  = AND (DELAY @size[1]), (NOT   @size[0])
$_data_write = DELAY{2} $data_write

#array _data_word_mask	32
#array _data_word_in	32
#array _data_word_out	32
$_write_enable = AND $_data_write, $size_32
@_data_word_mask = AND{32} $_data_write, $size_32, 1*32
@_data_word_in   = AND{32} $_data_write, $size_32, @data_input
@_data_word_mask[ 0:15] = AND{16} $_data_write, $size_16, (NOT   @addr[0]), 1*16
@_data_word_in  [ 0:15] = AND{16} $_data_write, $size_16, (NOT   @addr[0]), @data_input[0:15]
@_data_word_mask[16:31] = AND{16} $_data_write, $size_16, (DELAY @addr[0]), 1*16
@_data_word_in  [16:31] = AND{16} $_data_write, $size_16, (DELAY @addr[0]), @data_input[0:15]
@_data_word_mask[ 0: 7] = AND{8} $_data_write, $size_8, (NOT   @addr[1]), (NOT   @addr[0]), 1*8
@_data_word_in  [ 0: 7] = AND{8} $_data_write, $size_8, (NOT   @addr[1]), (NOT   @addr[0]), @data_input[0:7]
@_data_word_mask[ 8:15] = AND{8} $_data_write, $size_8, (NOT   @addr[1]), (DELAY @addr[0]), 1*8
@_data_word_in  [ 8:15] = AND{8} $_data_write, $size_8, (NOT   @addr[1]), (DELAY @addr[0]), @data_input[0:7]
@_data_word_mask[16:23] = AND{8} $_data_write, $size_8, (DELAY @addr[1]), (NOT   @addr[0]), 1*8
@_data_word_in  [16:23] = AND{8} $_data_write, $size_8, (DELAY @addr[1]), (NOT   @addr[0]), @data_input[0:7]
@_data_word_mask[24:31] = AND{8} $_data_write, $size_8, (DELAY @addr[1]), (DELAY @addr[0]), 1*8
@_data_word_in  [24:31] = AND{8} $_data_write, $size_8, (DELAY @addr[1]), (DELAY @addr[0]), @data_input[0:7]

// DRAM
// 0x10000000 0x100FFFFF
// 
$is_DRAM = AND (DELAY $enable), (NXOR{12,2} @addr[31:20], 0x100[11:0])
$_data_rdy, @_data_word_out = MEMORY_DRAM{32,18} $is_DRAM, @addr[2:19], $_write_enable, @_data_word_mask, @_data_word_in

// ROM area
//  Reserved range: 0x0000 - 0xFFF
$is_ROM  = AND (DELAY $enable), (NOT   @addr[31]), (NOT   @addr[30]), (NOT   @addr[29]), (NOT   @addr[28])
;$_data_rdy, @_data_word_out = FILEROM{32,12,0} $is_ROM, @addr[2:13]
$_data_rdy, @_data_word_out = CPU32ROM_LL $is_ROM, @addr[2:13]

// Alignment Checks
$fault_ac = AND $size_32, (OR @addr[0], @addr[1])
$fault_ac = AND $size_16, @addr[0]

// Data output
@data_output = AND{32} $_data_rdy, @_data_word_out
$ready = DELAY $_data_rdy

#endunit


#testcase 20 "Memory - 32-bit aligned"
#array out	32
$rdy, @out, $fault = MEMORY_SPACE 1, 0[0:31], 0, 0xFFFFFFFF[0:31], 0[0:1]
#testassert $rdy @out[0:31] 0x8E000003[0:31]
#testassert $rdy $fault 0
#testcomplete $rdy
#endtestcase

#testcase 20 "Memory - 32-bit aligned NZ"
#array out	32
$rdy, @out, $fault = MEMORY_SPACE 1, 0x04[0:31], 0, 0xFFFFFFFF[0:31], 0[0:1]
#testassert $rdy @out[0:31] 0x8EFFFFFF[0:31]
#testassert $rdy $fault 0
#testcomplete $rdy
#endtestcase

#testcase 20 "Memory - 32-bit non-aligned"
#array out	32
$rdy, @out, $fault = MEMORY_SPACE 1, 1[0:31], 0, 0xFFFFFFFF[0:31], 0[0:1]
#testassert $rdy $fault 1
#testcomplete $rdy
#endtestcase

; vim: ft=logiccircuit
