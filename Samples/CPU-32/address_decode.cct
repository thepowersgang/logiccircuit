;
; CPU-32 Design
; - By John Hodge (thePowersGang)
;
; address_decode.cct
; - Decodes and reads values for general operations
%include "../shift_register.cct"
%include "../adder.cct"
;
; === USAGE ===
; INPUT
; - $trigger : Pulse used to control start decoding
; - $in_rdy_clear : Clear the $rdy signal and others
; - $switch  : Swap op_1 and op_2 in output, set destination to op_2
; - $read_r  : Decode and read the 'R' operand (bits 23:20)
; - $read_m  : Read 'm' operand (still decoded into an address)
; - @instr   : Instruction data (full 32 bits)
; OUTPUT
; - $rdy     : Raised when the operation is completed
; - $is_mem_dest : Set if the destination is a memory address (as opposed to a register num)
; - @dest_addr : Destination address / register number (register num is stored in low 4 bits)
; - @op_1    : First operand (usually R, unless $is_mem_dest is set)
; - @op_2    : Second operand (usually m, unless $is_mem_dest is set)
; IMPORTS? (TODO: Are imports possible?)
; - $reg_enable   : Enable register unit
; - @reg_addr[4]  : Register read select (3 unit lag)
; - $reg_ready    : Register data ready
; - @reg_data_in[32] : Register data
; - $mem_enable   : Memory enable line (performs read at @mem_addr)
; - @mem_addr[32] : Memory address
; - $mem_ready    : Set when the memory data is ready
; - @mem_data_in[32] : Memory data
; - @pc[32]       : Program counter
#defunit CPU32_ADDRESS_DECODE
#input $trigger, $in_rdy_clear, $switch, $read_r, $read_m, @instr[32], \
	$reg_ready, @reg_data_in[32], $mem_ready, @mem_data_in[32], @pc[32]
#output $rdy, $is_mem_dest, @dest_addr[32], @op_1[32], @op_2[32], \
	$reg_enable, @reg_addr[4], $mem_enable, @mem_addr[32]

$_pulse = PULSE $trigger
$op_clear = PULSE $trigger
$rdy_clear = PULSE $trigger
$rdy_clear = PULSE $in_rdy_clear
$rdy_clear = DELAY (PULSE $in_rdy_clear)
$int_addr_clear = PULSE $trigger

$pulse = PULSE $_enable

#display $_enable "$switch = %1i, $read_r = %1i, $read_m" $switch, $read_r, $read_m
#display $rdy_clear "$rdy_clear = %1i" $rdy_clear
;#display $rdy "$rdy = %1i" $rdy

$NULL, $_enable = LATCH 1, $rdy_clear, (DELAY $trigger)
$NULL, @dest_addr = LATCH{32} 1, $_pulse, @dest_addr
$NULL, @op_1 = LATCH{32} 1, $op_clear, @op_1
$NULL, @op_2 = LATCH{32} 1, $op_clear, @op_2
$NULL, $rdy = LATCH{1} 1, (HOLD{3} $rdy_clear), $rdy_set
$NULL, $op_2_read = LATCH{1} 1, $rdy_clear, $op_2_read_set

;#display (AND $trigger, $read_r) "op_1" @op_1[31:0]
;#display $is_mem_dest "Memory Destination" 0
;#display $trigger "mode" @instr[26:24]
;#display $trigger "R" @instr[23:20]
;#display $trigger "m" @instr[19:16]

#array int_addr 32
$NULL, @int_addr = LATCH{32} 1, $int_addr_clear, @int_addr
;#display $trigger "internal addr = 0x%32x" @int_addr[31:0]

; Decode
$is_op_Rr   = AND $_enable, (NOT   @instr[26]), (NOT   @instr[25]), (NOT   @instr[24])
$is_op_Ri20 = AND $_enable, (NOT   @instr[26]), (NOT   @instr[25]), (DELAY @instr[24])
$is_op_Ri16 = AND $_enable, (NOT   @instr[26]), (DELAY @instr[25]), (NOT   @instr[24])
$is_op_Rs16 = AND $_enable, (NOT   @instr[26]), (DELAY @instr[25]), (DELAY @instr[24])
$is_op_RM16 = AND $_enable, (DELAY @instr[26]), (NOT   @instr[25]), (NOT   @instr[24])
$is_op_RM8  = AND $_enable, (DELAY @instr[26]), (NOT   @instr[25]), (DELAY @instr[24])
$is_op_RPC16 = AND $_enable, (DELAY @instr[26]), (DELAY @instr[25]), (NOT   @instr[24])
$is_op_RPC8  = AND $_enable, (DELAY @instr[26]), (DELAY @instr[25]), (DELAY @instr[24])

// TODO: Could use @instr[26] instead
$has_mem_read = OR $is_op_RM16, $is_op_RM16, $is_op_RPC16, $is_op_RPC8
$is_mem_dest = AND $switch, $has_mem_read
@dest_addr[3:0] = AND{4} (DELAY{4} $_enable), (NOT $switch), @instr[23:20]
@dest_addr[8:0] = AND{9} (DELAY{4} $_enable), $switch, (NOT $is_mem_dest), $read_m, (NOT   $is_op_Rr), 0x100[8:0]
@dest_addr[3:0] = AND{4} (DELAY{4} $_enable), $switch, $read_m, (DELAY $is_op_Rr), @instr[19:16]

; Rr
$reading_Rr = AND $pulse, $is_op_Rr
$reg_enable = DELAY $reading_Rr
@reg_addr[3:0] = AND{4} $reading_Rr, @instr[19:16]
$op_2_read_set = AND $is_op_Rr, (NOT $reading_op1), $reg_ready
@op_2 = AND{32} $is_op_Rr, (NOT $reading_op1), $reg_ready, @reg_data_in

; Ri20
$reading_Ri20 = AND $pulse, $is_op_Ri20
$op_2_read_set = DELAY $reading_Ri20
@op_2[19:0] = AND{20} $reading_Ri20, @instr[19:0]

; Ri16 / Rs16
; - This can use ROTATE because 16 bits shifted by 2^^4-1 will not wrap in a 32-bit container
$reading_Ri16 = AND $pulse, $is_op_Ri16
$reading_Ri16 = AND $pulse, $is_op_Rs16
$_Ri16_sign = AND $is_op_Rs16, @instr[15]
$op_2_read_set, @op_2[0:31] = ROTATE_LEFT_N_32 $reading_Ri16, @instr[16:19],0, @instr[0:15],$_Ri16_sign*16

#array _mem_add_op1 32
#array _mem_add_op2 32
#array _mem8_reg_shifted 32

; === RM16 / RPC16 ===
$is_M16 = OR $is_op_RM16, $is_op_RPC16
; - Prepare add (M16)
$reading_M16 = AND $pulse, $is_op_RM16
$reg_enable = DELAY $reading_M16
@reg_addr[3:0] = AND{4} $reading_M16, @instr[19:16]
$m16_add_ready = AND $_enable, $is_op_RM16, $reg_ready, (NOT $reading_op1)
@_mem_add_op1 = AND{32} $m16_add_ready, $is_op_RM16, (DELAY @reg_data_in)
; - Prepare add (PC16)
$m16_add_ready = AND $pulse, $is_op_RPC16
@_mem_add_op1 = AND{32} $_enable, $is_op_RPC16, (DELAY @pc)
; - Prepare add (operand 2)
@_mem_add_op2[31:0] = AND{32} $m16_add_ready, \
	@instr[15], @instr[15], @instr[15], @instr[15], @instr[15], @instr[15], @instr[15], @instr[15], \
	@instr[15], @instr[15], @instr[15], @instr[15], @instr[15], @instr[15], @instr[15], @instr[15], \
	@instr[15:0]
$_mem_add_start = DELAY $m16_add_ready
; - Add is done, trigger the read
$addr_ready = AND $_enable, $is_M16, $_mem_add_done
; === RM8 / RPC8 ===
$is_M8 = OR $is_op_RM8, $is_op_RPC8
$is_M8_stg1_clear = OR $_pulse, $_mem8_add1_done
$NULL, $is_M8_stg1 = LATCH 1, $is_M8_stg1_clear, (PULSE $is_M8)
$is_M8_stg2_clear = OR $_pulse, $_mem8_shift_done
$NULL, $is_M8_stg2 = LATCH 1, $is_M8_stg2_clear, $_mem8_add1_done
; - Stage 1: add Base + Offset
$reading_M8 = AND $pulse, $is_op_RM8
$reg_enable = DELAY $reading_M8
@reg_addr[3:0] = AND{4} $reading_M8, @instr[19:16]
$m8_add_ready = DELAY{3} $reading_M8
@_mem_add_op1 = AND{32} $m8_add_ready, $is_op_RM8, @reg_data_in
$m8_add_ready = AND $pulse, $is_op_RPC8
@_mem_add_op1 = AND{32} $m8_add_ready, $is_op_RPC8, @pc
@_mem_add_op2[31:0] = AND{32} $m8_add_ready, \
	@instr[7], @instr[7], @instr[7], @instr[7], @instr[7], @instr[7], @instr[7], @instr[7], \
	@instr[7], @instr[7], @instr[7], @instr[7], @instr[7], @instr[7], @instr[7], @instr[7], \
	@instr[7], @instr[7], @instr[7], @instr[7], @instr[7], @instr[7], @instr[7], @instr[7], \
	@instr[7:0]
$_mem_add_start = DELAY $m8_add_ready
$_mem8_add1_done = AND $is_M8, $is_M8_stg1, $_mem_add_done
; - Stage 2: rotate index
$reg_enable = PULSE $is_M8_stg2
@reg_addr[3:0] = AND{4} $is_M8_stg2, @instr[15:12]
$_mem8_shift_trigger = AND $reg_ready, $is_M8_stg2, $is_M8
#display $_mem8_shift_trigger "mem8_shift input" (DELAY @reg_data_in)
$_mem8_shift_done, @_mem8_reg_shifted, $NULL = SHIFT_LEFT_N_32 $_mem8_shift_trigger,\
	@instr[8:11],0, (DELAY @reg_data_in), \
	0
#display $_mem8_shift_done "@_mem8_reg_shifted = %32x" @_mem8_reg_shifted[31:0]
; - Stage 3: add above two
@_mem_add_op1 = AND{32} $_mem8_shift_done, @_mem8_reg_shifted
@_mem_add_op2 = AND{32} $_mem8_shift_done, @int_addr
$_mem_add_start = PULSE $_mem8_shift_done
$int_addr_clear = PULSE $_mem8_shift_done
$addr_ready = AND $is_M8, (NOT $is_M8_stg1), $_mem_add_done
; === Common Adder for Memory ===
#display $_mem_add_start "add 0x%32x and 0x%32x" @_mem_add_op1[31:0], @_mem_add_op2[31:0]
$_mem_add_done, @int_addr, $NULL = ADDER_32BIT $_mem_add_start, @_mem_add_op1, @_mem_add_op2, 0
#display $_mem_add_done "add gave 0x%32x" @int_addr[31:0]

; === Memory Load ===
$op_2_read_set = PULSE (AND $addr_ready, (NOT $read_m))
$mem_enable = AND $addr_ready, $read_m
@mem_addr = AND{32} $addr_ready, $read_m, @int_addr
@op_2 = AND{32} $is_M8, $mem_ready, @mem_data_in
@op_2 = AND{32} $is_M16, $mem_ready, @mem_data_in
$op_2_read_set = PULSE (AND $mem_ready, (NOT $op_2_read), $_enable)
; - Set @dest_addr if $switch and it's a memory reference
@dest_addr = AND{32} $addr_ready, $is_mem_dest, @int_addr

; === Read Op1 ===
$reading_op1 = AND $read_r, $op_2_read
#display $reading_op1 "Reading OP1" 0
$reg_enable = PULSE $reading_op1
@reg_addr[3:0] = AND{4} $reading_op1, @instr[23:20]
@op_1 = AND{32} $reading_op1, $reg_ready, @reg_data_in
$op_1_read = AND $reading_op1, $_enable, $reg_ready
; === Skip Op1? ===
$op_1_read = AND $op_2_read, $_enable, (NOT $read_r)
#display $op_1_read "OP1 Read set" $op_1_read

; === Ready if not mem dest ===
$rdy_set = AND $op_1_read, (NOT $switch)

; === Swap if mem requested ===
; - Register 256 does not exist, so abuse that bit as a flag 'drop this data'
$_swap_ops = AND (PULSE $op_1_read), $switch
#display $_swap_ops "Swapping OP1/OP2 %32x and %32x" @op_1[31:0], @op_2[31:0]
@op_1 = DELAY{3} (AND{32} $_swap_ops, @op_2)
@op_2 = DELAY{3} (AND{32} $_swap_ops, @op_1)
$op_clear = DELAY $_swap_ops
$rdy_set = DELAY{3+2} $_swap_ops

#endunit

%include "address_decode_test.cct"

; vim: ft=logiccircuit
