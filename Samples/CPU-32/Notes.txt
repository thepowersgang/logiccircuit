An attempt at designing a CPU to be built using virtual logic gates

32-bit opcodes, usually with 8 operation, 4+4 register, 16 operand
All data operations are 32 bits
- 'x' means "Don't Care" - should be zero

GP Registers
R0-3	- Arguments
R4-7	- Caller save
R8-11	- Callee save
R12	- Frame Pointer
R13	- Stack Pointer (Fixed)
R14	- Link Register (Fixed)
R15	- PIC base

Control Registers
CR0	- Exception source instruction
CR1	- Exception reason
CR2	- MMU Base
CR3	- System Control Flags
CR4	- Avail 1
CR5	- Avail 2
CR6	- Interrupt Saved SP
CR7	- Interrupt Saved Flags
CR8-15	- Undef

Exception Vectors:
0x00	- Reset
 > CR0 = 0
0x04	- External IRQ
 > CR0 = Next Instruction
0x08	- Undefined Instruction
 > CR0 = Faulting PC + 4
 > CR1 = Instruction word
0x0C	- Memory Abort (MMU Fault)
 > CR0 = Faulting PC + 4
 > CR1 = Page of fault, reason in low bits
0x10	- Unaligned Access
 > CR0 = Faulting PC + 4
 > CR1 = Faulting address
0x14	- Software Interrupt
 > CR0 = Next Instruction
 > CR1 = SWI Instruction
0x18	- General Protection Fault
 > CR0 = Next Instruction
 > CR1 = Offending instruction
0x1C	- RESERVED

TODO:
- MMU / Permission levels
- CPUID?

Normal Format:
|---Op---|Dest Src|      Value      |
|oooooooo|RRRRrrrr|vvvvvvvv vvvvvvvv|

Addressing Modes (for most commands)
 > Decoder allows order of operands to be reversed (causing op2 = op2 <op> op1)
ooooo000 RRRRrrrr xxxxxxxx xxxxxxxx	- R = R <op> r
ooooo001 RRRRvvvv vvvvvvvv vvvvvvvv	- R = R <op> imm20
ooooo010 RRRRssss vvvvvvvv vvvvvvvv	- R = R <op> imm16 <<< s*2
ooooo011 RRRRssss vvvvvvvv vvvvvvvv	- R = R <op> imm16s <<< s*2
ooooo100 RRRRrrrr vvvvvvvv vvvvvvvv	- R = R <op> [r + imm16s]
ooooo101 RRRRrrrr iiiisssv vvvvvvvv	- R = R <op> [r + Ri << s + imm9s]
ooooo110 RRRRxxxx vvvvvvvv vvvvvvvv	- R = R <op> [PC + imm16s]
ooooo111 RRRRxxxx iiiisssv vvvvvvvv	- R = R <op> [PC + Ri << s + imm9s]

===============
= Opcode List =
===============

== Basic ALU
 > 's': Switch order of operands
 > Saves to immedates are ignored
0s000mmm	- MOV op1, op2
0s001mmm	- AND op1, op2
0s010mmm	- OR op1, op2
0s011mmm	- XOR op1, op2
0s100mmm	- ADD op1, op2
0s101mmm	- SUB op1, op2
0s110mmm	- CMP op1, op2
0s111mmm	- TEST op1, op2

== Conditional jumps
 > 'c': Condition code (see below)
1000cccc v24	- JMPcc .+imm24s*4
1001cccc v24	- CALLcc .+imm24s*4 (ala BX in ARM)
10100mmm R=cccc	- JMPcc op2
10101mmm R=cccc	- CALLcc op2

== General purpose single-operand instructions
10110mmm R=0000	- PUSH op2
         R=0001	- POP op2
         R=0010 - BSWAP op2	- Big<->Little endian swap
         R=0011 - BSWAPW op2	- Big<->Little endian swap (low word only)
         R=01xx - ?
         R=1xxx - ?


== Misc instructions
10111000 00000000 mmmmmmmm vvvvvvvv	- LDF m, v	- Load (Set) Flags (Mask, Value)
    1000 00000001 00000000 ccccrrrr	- MOV CRc, Rr	- Move to control register
    1000 00000001 00000001 ccccrrrr	- MOV Rr, CRc	- Move from control register
    1000 00000001 00000010 00000000	- IRET	- PC=CR0,SP=CR6,Flags=CR7
    1000 00000001 00000010 xxxxxxxx	- ?
    1000 00000001 00000011	- ?
    1000 00000001 000001xx	- ?
    1000 00000001 00001xxx	- ?
    1000 00000001 0001xxxx	- ?
    1000 00000001 001xxxxx	- ?
    1000 00000001 01xxxxxx	- ?
    1000 00000001 1xxxxxxx	- ?
    1000 0000001s RRRRrrrr dcivvvvv	- <op> R, r, Rv/imm4	- Rotate/Shift {s} Left/Right {d} (Carry {c}) Rv/imm4 {i}
    1000 000001xx - ?
    1000 00001xxx - ?
    1000 0001xxxx - ?
    1000 001xxxxx - ?
    1000 01xxxxxx - ?
    1000 1xxxxxxx - ?
    1001	- ?
    101x	- ?
    11mm	- LEA R, op2	- Load Effective Address (NOTE: Modes 0-3 are not memory, so are reused)

== Non-word Loads/Stores
110000o0 RRRRrrrr ssssssss ssssssss	- STRH R.o, [r + imm16s]	- Store 16 bits from register
    00o1 RRRRrrrr ssssssss ssssssss	- LDRH R.o, [r + imm16s]	- Load 16 bits to register
    0100 RRRRrrrr ssssssss ssssssss	- LDRHZ R, [r + imm16s] 	- Load 16-bits zero extended
    0101 RRRRrrrr ssssssss ssssssss	- LDRHS R, [r + imm16s] 	- Load 16-bits sign extended
    0110 RRRRrrrr ssssssss ssssssss	- LDRBZ R, [r + imm16s] 	- Load 8-bits zero extended
    0111 RRRRrrrr ssssssss ssssssss	- LDRBS R, [r + imm16s] 	- Load 8-bits sign extended
    1oo0 RRRRrrrr ssssssss ssssssss	- STRB R.o, [r + imm16s]	- Store 8 bits from register
    1oo1 RRRRrrrr ssssssss ssssssss	- LDRB R.o, [r + imm16s]	- Load 8 bits to register
1101xxxx	- ?
111xxxxx	- ?

--- Condition Codes ---
0000 ZF=1	EQ	Equal
0001 ZF=0	NE	Not Equal
0010 CF=1	C	Carry Set
0011 CF=0	NC	Carry Clear
0100 SF=1	S	Negative
0101 SF=0	NS	Positive
0110 OF=1	O	Overflow
0111 OF=0	NO	No Overflow
1000 OF=ZF	GE	Signed Greater or Equal
1001 OF!=ZF	LT	Signed Less
1010 OF=0,ZF=0	GT	Signed Greater
1011 OF=1|ZF=1	LE	Signed Less or Equal
1100 CF=0,ZF=0	A	Above (Unsigned Greater)
1101 CF=1|ZF=1	BE	Below-Equal (Unsigned Less-than)
1110 -  	--	Always
1111 -  	--	Never


===
Memory Interface
===
- Address is internally latched
- Size encoded as (0: 32-bit, 1: 16-bit, 2: 8-bit, 3: undef)

===
MMU Notes
===

- x86-style layout (10+10+12)
 > Would I want to extend to 64-bit paddr?
- Support ASIDs?

