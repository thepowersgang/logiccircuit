An attempt at designing a CPU to be built using virtual logic gates

32-bit opcodes, usually with 8 operation, 4+4 register, 16 operand
All data operations are 32 bits

Special Registers
R12 - Frame Pointer (Suggested)
R13 - Stack Pointer
R14 - Link Register
R15 - PIC base (suggested)

TODO: R15 = Aliased to PC again?
- Need PC-relative load/store?
- R15 = write-ignore

Normal Format:
|---Op---|Dest Src|      Value      |
|oooooooo|RRRRrrrr|vvvvvvvv vvvvvvvv|

Addressing Modes (for most commands)

ooooo000 RRRRrrrr xxxxxxxx xxxxxxxx	- <op> R, r
ooooo001 RRRRvvvv vvvvvvvv vvvvvvvv	- <op> R, imm20
ooooo010 RRRRssss vvvvvvvv vvvvvvvv	- <op> R, imm16 <<< s
ooooo011 RRRRssss vvvvvvvv vvvvvvvv	- <op> R, imm16s <<< s
ooooo100 RRRRrrrr vvvvvvvv vvvvvvvv	- <op> R, [r + imm16s]
ooooo101 RRRRrrrr iiiissss vvvvvvvv	- <op> R, [r + Ri << s + imm8s]
ooooo110 RRRRrrrr vvvvvvvv vvvvvvvv	- <op> [r + imm16s], R
ooooo111 RRRRrrrr iiiissss vvvvvvvv	- <op> [r + Ri << s + imm8s], R

Operations
00000mmm	- MOV op1, op2
00001mmm	- AND op1, op2
00010mmm	- OR op1, op2
00011mmm	- XOR op1, op2
00100mmm	- ADD op1, op2
00101mmm	- SUB op1, op2
00110mmm	- CMP op1, op2
00111mmm	- TEST op1, op2

0100cccc v24	- JMPcc .+imm24s*4
0101cccc v24	- CALLcc .+imm24s*4 (ala BX in ARM)
01100mmm R=0000	- PUSH op2
01100mmm R=0001	- POP op2
01100mmm R=001x - ?
01100mmm R=01xx - ?
01100mmm R=10xx - ?
01100mmm R=110x - ?
01100mmm R=1110	- MOV op2, PC	- Functionally a jump
01100mmm R=1111	- CALL op2

01101000 00000000 mmmmmmmm vvvvvvvv	- LDF m, v	- Load (Set) Flags (Mask, Value)
01101000 00000001 - ?
01101000 0000001x - ?
01101000 000001xx - ?
01101000 00001xxx - ?
01101000 0001rrrr vvvvvvvv vvvvvvvv	- MOV r, .+imm16s*4
01101000 001xxxxx - ?
01101000 01xxxxxx - ?
01101000 1xxxxxxx - ?
01101001	- ?
0110101x	- ?
011011xx	- ?
0111xxxx	- ?

100000o0 RRRRrrrr ssssssss ssssssss	- STRWo R, [r + imm16s]	- Store 16 bits from register
100000o1 RRRRrrrr ssssssss ssssssss	- LDRWo R, [r + imm16s]	- Load 16 bits to register
100001xx	- ?
10001oo0 RRRRrrrr ssssssss ssssssss	- STRBo R, [r + imm16]	- Store 8 bits from register
10001oo1 RRRRrrrr ssssssss ssssssss	- LDRBo R, [r + imm16]	- Load 8 bits to register
1001xxxx	- ?
101xxxxx	- ?
11xxxxxx	- ?

--- Condition Codes ---
0000 ZF=1	EQ	Equal
0001 ZF=0	NE	Not Equal
0010 CF=1	C	Carry Set
0011 CF=0	NC	Carry Clear
0100 SF=1	S	Negative
0101 SF=0	NS	Positive
0110 OF=1	O	Overflow
0111 OF=0	NO	No Overflow
1000 OF=ZF	GE	Signed Greater or Equal
1001 OF!=ZF	LT	Signed Less
1010 OF=0,ZF=0	GT	Signed Greater
1011 OF=1|ZF=1	LE	Signed Less or Equal
1100 CF=0,ZF=0	A	Above (Unsigned Greater)
1101 CF=1|ZF=1	BE	Below-Equal (Unsigned Less-than)
1110 -  	--	Always
1111 -  	--	Never
