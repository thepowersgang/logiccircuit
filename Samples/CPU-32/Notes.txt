An attempt at designing a CPU to be built using virtual logic gates

32-bit opcodes, usually with 8 operation, 4+4 register, 16 operand
All data operations (save for in modes 2/3) are 32 bits


Normal Format:
|---Op---|Dest Src|      Value      |
|oooooooo|RRRRrrrr|vvvvvvvv vvvvvvvv|

Addressing Modes (for most commands)

ooooo000 RRRRrrrr xxxxxxxx xxxxxxxx	- <op> R, r
ooooo001 RRRRvvvv vvvvvvvv vvvvvvvv	- <op> R, imm20
ooooo010 RRRRssss vvvvvvvv vvvvvvvv	- <op> R, imm16 <<< s
ooooo011 RRRRssss vvvvvvvv vvvvvvvv	- <op> R, imm16s <<< s
ooooo100 RRRRrrrr vvvvvvvv vvvvvvvv	- <op> R, [r + imm16s]
ooooo101 RRRRrrrr iiiissss vvvvvvvv	- <op> R, [r << s + Ri + imm8s]
ooooo110 RRRRrrrr vvvvvvvv vvvvvvvv	- <op> [r + imm16s], R
ooooo111 RRRRrrrr iiiissss vvvvvvvv	- <op> [r << s + Ri + imm8s], R

Operations
00000xxx	- MOV
00001xxx	- AND
00010xxx	- OR
00011xxx	- XOR
00100xxx	- ADD
00101xxx	- SUB
00110xxx	- CMP
00111xxx	- TEST

01000ccc v24	- JMPcc .+imm24s
01001ccc v24	- CALLcc .+imm24s
01010xxx R=0	- PUSH op2
01010xxx R=1	- POP op2




0000rrrr - MOV A, r	(MOV A, A = NOP)
0001rrrr - MOV r, A
0010rrrr - LOAD r, [X]
0011rrrr - STORE [X], r
0100xxxx - ????
0101sccc - JMPcc .+rel8/abs16 (depending on s)
0110sccc - CALLcc .+rel8/abs16 (depending on s)
01110ccc - RETcc
    1xxx - MISC
    1000 - NOT A
    1001 - NEG A
    1010 - CLC
    1011 - STC
    1100 - LDI A, imm8
    1101 - LAI X, imm16
    1110 - MOV SP, X	; Set SP from X
    1111 - ADD SP, A	; Sign extended add A to SP
1000rrrr - ADD A, r
1001rrrr - SUB A, r
1010rrrr - AND A, r
1011rrrr - OR A, r
1100rrrr - XOR A, r
1101rrrr - SHL A, r
1110rrrr - PUSH r
1111rrrr - POP r

IDEAS:
	Mabe make LOAD/STORE both use 0100lrrr and load/store (determined by l)
	from/to R15:14, R13:12, ... depending on rrr

NOTES:
	LDI - Load Data Immediate - Load Immediate Byte into A
	LAI - Load Address Immediate - Load Immediate Word into X

16 registers
R15:R14 - SP pseudo register
R13:R12 - X pseudo register
R0 - Accumulator (A)

Branch Conditions:
000:	Unconditional
001:	Never
010:	A == 0
011:	A != 0
100:	Carry Set
101:	Carry Clear
110:	Negative
111:	Non-negative

First 4 bits select the "unit"
last 4 bits select a register input for the unit
(usually)
