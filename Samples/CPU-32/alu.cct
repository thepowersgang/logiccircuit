; CPU-32 Design
; - By John Hodge (thePowersGang)
;
; alu.cct
; - Arithmatic / Logic Unit
;
%include "common.h.cct"
%include "../adder.cct"

#defunit CPU32_ALU
#input $enable, @op[3], @alu_in_dst[32], @alu_in_src[32], $flags_C
#output $_done, $alu_nosave, @_alu_out[32],\
	$flags_C_clear, $flags_O_clear, $flags_Z_clear, $flags_S_clear, \
	$flags_C_set, $flags_O_set, $flags_Z_set, $flags_S_set
#array alu_out	32

// --- ALU Operations ---
$is_MOV, $is_AND, $is_OR, $is_XOR, $is_ADD, $is_SUB, $is_CMP, $is_TST = DEMUX{3} $enable, @op

$flags_Z_clear = PULSE $enable
$flags_Z_set   = AND (DELAY $done), (NOR @alu_out)
$flags_S_clear = PULSE $enable
$flags_S_set   = AND $done, @alu_out[31]
$_done = DELAY{2} $done
@_alu_out = DELAY{2} @alu_out

// --- MOV ---
#display $is_MOV "MOV 0x%32x" @alu_in_src[31:0]
@alu_out = AND{32} $is_MOV, @alu_in_src
$done    = PULSE $is_MOV
// --- AND ---
#display $is_AND "AND 0x%32x & 0x%32x" @alu_in_dst[31:0], @alu_in_src[31:0]
%assign i 0
%rep NUM_GPR_BITS
@alu_out[i] = AND $is_AND, @alu_in_src[i], @alu_in_dst[i]
%assign i i+1
%endrep
$done = PULSE $is_AND
// --- OR  ---
#display $is_OR "OR 0x%32x | 0x%32x" @alu_in_dst[31:0], @alu_in_src[31:0]
%assign i 0
%rep NUM_GPR_BITS
@alu_out[i] = AND (DELAY $is_OR), (OR @alu_in_src[i], @alu_in_dst[i])
%assign i i+1
%endrep
$done = PULSE (DELAY $is_OR)
// --- XOR ---
#display $is_XOR "XOR 0x%32x & 0x%32x" @alu_in_dst[31:0], @alu_in_src[31:0]
%assign i 0
%rep NUM_GPR_BITS
@alu_out[i] = AND (DELAY $is_XOR), (XOR @alu_in_src[i], @alu_in_dst[i])
%assign i i+1
%endrep
$done = PULSE (DELAY $is_XOR)
// --- Common Adder ---
#array alu_adder_op2	NUM_GPR_BITS
#array add_out	NUM_GPR_BITS
$add_done, @add_out, $add_C_out = ADDER_32BIT $alu_adder_pulse, @alu_in_dst, @alu_adder_op2, $alu_adder_CF
$done    = DELAY{3} $add_done
@alu_out = DELAY{3} @add_out
// --- ADD ---
#display $is_ADD "ADD 0x%32x + 0x%32x + %i" @alu_in_dst[31:0], @alu_in_src[31:0], $flags_C
$flags_C_clear = PULSE (DELAY $is_ADD)
$flags_O_clear = PULSE (DELAY $is_ADD)
$alu_adder_pulse = DELAY $is_ADD
@alu_adder_op2   = AND{32} $is_ADD, @alu_in_src
$alu_adder_CF    = AND $is_ADD, $flags_C
$flags_C_set = AND $is_ADD, $add_done, $add_C_out
$flags_O_set = AND $is_ADD, (NOT   @alu_in_dst[31]), (NOT   @alu_in_src[31]), (DELAY @alu_out[31])	// 00,1
$flags_O_set = AND $is_ADD, (DELAY @alu_in_dst[31]), (DELAY @alu_in_src[31]), (NOT   @alu_out[31])	// 11,0
// --- SUB ---
#display $is_SUB "SUB 0x%32x - 0x%32x" @alu_in_dst[31:0], @alu_in_src[31:0]
$flags_C_clear = PULSE (DELAY{2} $is_SUB)
$alu_adder_pulse = DELAY{2} $is_SUB
@alu_adder_op2   = AND{32} $is_SUB, (NOT @alu_in_src)
$alu_adder_CF    = AND $is_SUB, (NOT $flags_C)
$flags_C_set = AND $is_SUB, (DELAY $add_done), (NOT $add_C_out)
// --- CMP --
#display $is_CMP "CMP 0x%32x - 0x%32x" @alu_in_dst[31:0], @alu_in_src[31:0]
$flags_C_clear = PULSE (DELAY{2} $is_CMP)
$alu_adder_pulse = DELAY{2} $is_SUB
@alu_adder_op2   = AND{32} $is_CMP, (NOT @alu_in_src)
$alu_adder_CF    = AND $is_CMP, (NOT $flags_C)
$alu_nosave = DELAY $is_CMP
$flags_C_set = AND $is_CMP, (DELAY $add_done), (NOT $add_C_out)
// --- TST --
#display $is_TST "TST 0x%32x & 0x%32x" @alu_in_dst[31:0], @alu_in_src[31:0]
%assign i 0
%rep NUM_GPR_BITS
@alu_out[i] = AND $is_TST, @alu_in_src[i], @alu_in_dst[i]
%assign i i+1
%endrep
$alu_nosave = DELAY $is_TST
$done       = PULSE $is_TST

#display $enable "= 0x%32x (%32x)" @alu_out[31:0], @_alu_out[31:0]
#display $enable "done=%1i,_done=%1i" $done, $_done

#endunit

; --------------------------------------------------------------------
; Test cases
; --------------------------------------------------------------------

%macro _fixture 6
#array out 32
#array flags_clear 4
#array flags_set   4
$NULL, @flags_clear = LATCH{4} 1, 0, @flags_clear
$NULL, @flags_set = LATCH{4} 1, 0, @flags_set

$done, $nowrite, @out, @flags_clear, @flags_set \
	= CPU32_ALU 1, %1[0:2], %2[0:31], %3[0:31], %4
%endmacro

#testcase 10 "ALU: MOV"
_fixture 0, 0x123123456, 0xFF005523, 0,0,0
#testassert $done @flags_set[0:2]   0b000[0:2]	; ZOC
#testassert $done @flags_clear[0:2] 0b100[0:2]	; ZOC
#testassert $done $nowrite 0
#testassert $done @out[31:0]	0xFF005523[31:0]
#testcomplete $done
#endtestcase

#testcase 10 "ALU: AND"
_fixture 1, 0x12300565, 0x00E4C000, 0,0,0
#testassert $done @flags_set[0:2]   0b000[0:2]
#testassert $done @flags_clear[0:2] 0b100[0:2]
#testassert $done $nowrite 0
#testassert $done @out[31:0]	0x00200000[31:0]
#testcomplete $done
#endtestcase

#testcase 10 "ALU: OR"
_fixture 2, 0x12300565, 0x00E4C000, 0,0,0
#testassert $done @flags_set[0:2]   0b000[0:2]
#testassert $done @flags_clear[0:2] 0b100[0:2]
#testassert $done $nowrite 0
#testassert $done @out[31:0]	0x12F4C565[31:0]
#testcomplete $done
#endtestcase

#testcase 10 "ALU: XOR"
_fixture 3, 0x12300565, 0x00E4C000, 0,0,0
#testassert $done @flags_set[0:2]   0b000[0:2]
#testassert $done @flags_clear[0:2] 0b100[0:2]
#testassert $done $nowrite 0
#testassert $done @out[31:0]	0x12D4C565[31:0]
#testcomplete $done
#endtestcase

#testcase 40 "ALU: ADD - NC in, NC out"
_fixture 4, 0x12300565, 0x00E4C000, 0,0,0
#testassert $done @flags_set[0:2]   0b000[0:2]
#testassert $done @flags_clear[0:2] 0b111[0:2]	; ZOC
#testassert $done $nowrite 0
#testassert $done @out[31:0]	0x1314C565[31:0]
#testcomplete $done
#endtestcase

#testcase 40 "ALU: ADD - NC in, C out"
_fixture 4, 0x12300565, 0xF0E4C000, 0,0,0
#testassert $done @flags_set[0:2]   0b001[0:2]	; ZOC
#testassert $done @flags_clear[0:2] 0b111[0:2]	; ZOC
#testassert $done $nowrite 0
#testassert $done @out[31:0]	0x0314C565[31:0]
#testcomplete $done
#endtestcase

#testcase 40 "ALU: ADD - C in, NC out"
_fixture 4, 0x12300565, 0x00E4C000, 1,0,0	; COZ
#testassert $done @flags_set[0:2]   0b000[0:2]	; ZOC
#testassert $done @flags_clear[0:2] 0b111[0:2]	; ZOC
#testassert $done $nowrite 0
#testassert $done @out[31:0]	0x1314C566[31:0]
#testcomplete $done
#endtestcase

#testcase 40 "ALU: ADD - C in, C out"
_fixture 4, 0x12300565, 0xF0E4C000, 1,0,0
#testassert $done @flags_set[0:2]   0b001[0:2]	; ZOC
#testassert $done @flags_clear[0:2] 0b111[0:2]	; ZOC
#testassert $done $nowrite 0
#testassert $done @out[31:0]	0x0314C566[31:0]
#testcomplete $done
#endtestcase

#testcase 40 "ALU: SUB - NC in, NC out"
_fixture 5, 0x12300565, 0x00E4C000, 0,0,0
#testassert $done @flags_set[0:2]   0b000[0:2]	; ZOC
#testassert $done @flags_clear[0:2] 0b101[0:2]	; ZOC
#testassert $done $nowrite 0
#testassert $done @out[31:0]	0x114B4565[31:0]
#testcomplete $done
#endtestcase

#testcase 10 "ALU: ZF (XOR)"
_fixture 3, 0x00000005, 0x00000005, 0,0,0
#testassert $done @flags_set[0:2]   0b100[0:2]	; ZOC
#testassert $done @flags_clear[0:2] 0b100[0:2]	; ZOC
#testassert $done $nowrite 0
#testassert $done @out[31:0]	0[31:0]
#testcomplete $done
#endtestcase

; vim: ft=logiccircuit
