%include "../adder.cct"
%include "../shift_register.cct"
%include "address_decode.cct"

;#testfixture

;#endtestfixure

; ---------------------------------------------------------------------
#testcase 100 "Decode - R10, R11"

#array dest_addr 32
#array op1 32
#array op2 32
#array _ra 4
#array _rd 32
#array _ma 32
#array _md 32

; Pseudo register file
; - R10 = 0x12345678
; - R11 = 0xFEDCBA98
@_rd[31:0] = AND{32} (DELAY $_re), (DELAY @_ra[3]), (NOT @_ra[2]), (DELAY @_ra[1]), (NOT   @_ra[0]), (0x12345678[31:0])
@_rd[31:0] = AND{32} (DELAY $_re), (DELAY @_ra[3]), (NOT @_ra[2]), (DELAY @_ra[1]), (DELAY @_ra[0]), (0xFEDCBA98[31:0])
$_rr = DELAY{2} $_re
#testassert $_re @_ra[3:1] 11[3:1]	; 10/11 (differ by a bit)
#display 1 "_rd = %32x" @_rd[31:0]
//#testassert $_re @_ra[3:0] 11[3:0]	; 10/11 (differ by a bit)

; Simulated memory
; - Assert that memory is never accessed
#testassert 1	$_me	0

$done, $imd, @dest_addr, @op1, @op2 = CPU32_ADDRESS_DECODE \
	(DELAY 1), 0, 1, 1, 0xF0ABAAAA[0:31], \
	$_re, @_ra, $_rr, @_rd, \
	$_me, @_ma, $_mr, @_md

; Final output
#testassert $done  $imd 0
#testassert $done  @dest_addr[31:0] 10[31:0]
#testassert $done  @op1[31:0] 0x12345678[31:0]
#testassert $done  @op2[31:0] 0xFEDCBA98[31:0]
#testcomplete $done

#endtestcase

; ---------------------------------------------------------------------
#testcase 100 "Decode - R10, Imm20"
#array dest_addr 32
#array op1 32
#array op2 32
#array _ra 4
#array _rd 32
#array _ma 32
#array _md 32

; Pseudo register file
; - R10 = 0x12345678
@_rd[31:0] = AND{32} (DELAY $_re), (DELAY @_ra[3]), (NOT @_ra[2]), (DELAY @_ra[1]), (NOT @_ra[0]), (0x12345678[31:0])
$_rr = DELAY{2} $_re
; - Only R10 is allowed to be accessed
#testassert $_re @_ra[3:0] 10[3:0]
; Simulated memory
; - Assert that memory is never accessed
#testassert 1	$_me	0

$done, $imd, @dest_addr, @op1, @op2 = CPU32_ADDRESS_DECODE \
	(DELAY 1), 0, 1, 1, 0xF1A12345[0:31], \
	$_re, @_ra, $_rr, @_rd, \
	$_me, @_ma, $_mr, @_md

; Final output
#testassert $done  $imd 0
#testassert $done  @dest_addr[31:0] 10[31:0]
#testassert $done  @op1[31:0] 0x12345678[31:0]
#testassert $done  @op2[31:0] 0x00012345[31:0]
#testcomplete $done

#endtestcase

; ---------------------------------------------------------------------
; Tests Imm16 decode
; - Also uses $read_r = 0 to make test simpler
#testcase 100 "Decode - R-, Imm16 << 5"
#array dest_addr 32
#array op1 32
#array op2 32
#array _ra 4
#array _rd 32
#array _ma 32
#array _md 32

; No register/memory accesses allowed
#testassert 1	$_re	0
#testassert 1	$_me	0

$done, $imd, @dest_addr, @op1, @op2 = CPU32_ADDRESS_DECODE \
	(DELAY 1), 0, 0, 1, 0xF2057777[0:31], \
	$_re, @_ra, $_rr, @_rd, \
	$_me, @_ma, $_mr, @_md

; Final output
#testassert $done  $imd 0
#testassert $done  @dest_addr[31:0] 0[31:0]
#testassert $done  @op2[31:0] 0x000EEEE0[31:0]
#testcomplete $done

#endtestcase

; ---------------------------------------------------------------------
; Tests Imm16s decode
; - Also uses $read_r = 0 to make test simpler
#testcase 100 "Decode - R-, Imm16s << 12"
#array dest_addr 32
#array op1 32
#array op2 32
#array _ra 4
#array _rd 32
#array _ma 32
#array _md 32

; No register/memory accesses allowed
#testassert 1	$_re	0
#testassert 1	$_me	0

$done, $imd, @dest_addr, @op1, @op2 = CPU32_ADDRESS_DECODE \
	(DELAY 1), 0, 0, 1, 0xF30C8777[0:31], \
	$_re, @_ra, $_rr, @_rd, \
	$_me, @_ma, $_mr, @_md

; Final output
#testassert $done  $imd 0
#testassert $done  @dest_addr[31:0] 0[31:0]
#testassert $done  @op2[31:0] 0xF8777FFF[31:0]
#testcomplete $done

#endtestcase

; ---------------------------------------------------------------------
; Tests [r+imm16] decode
; - Also uses $read_r = 0 to make test simpler
#testcase 50 "Decode - R-, [R15+imm16]"
#array dest_addr 32
#array op1 32
#array op2 32
#array _ra 4
#array _rd 32
#array _ma 32
#array _md 32

; Registers
; - R15 = 0x00FF0000
$_rr = DELAY $_re
@_rd[31:0] = AND{32} $_re, @_ra, 0xFF1000[31:0]
#display $_re "@_ra" @_ra
#testassert $_re @_ra[3:0] 15[3:0]
; Memory
; - Must be 0xFF2234 (0xFF1000 + 0x1234)
$_mr = DELAY $_me
@_md[31:0] = AND{32} $_me, 0xF0E1D2C3[31:0]
#display $_me "@_ma" @_ma
#testassert $_me @_ma[31:0] 0x00FF2234[31:0]

$done, $imd, @dest_addr, @op1, @op2 = CPU32_ADDRESS_DECODE \
	(DELAY 1), 0, 0, 1, 0xF40F1234[0:31], \
	$_re, @_ra, $_rr, @_rd, \
	$_me, @_ma, $_mr, @_md

; Final output
#testassert $done  $imd 0
#testassert $done  @dest_addr[31:0] 0[31:0]
#testassert $done  @op2[31:0] 0xF0E1D2C3[31:0]
#testcomplete $done

#endtestcase

; vim: ft=logiccircuit
