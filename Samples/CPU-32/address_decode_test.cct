%macro CPU32_ADDRESS_DECODE_BOILERPLATE	4
#array dest_addr 32
#array op1 32
#array op2 32
#array _ra 4
#array _rd 32
#array _ma 32
#array _md 32
#array _pc 32
$done, $imd, @dest_addr, @op1, @op2, $_re,@_ra,$_me,@_ma = CPU32_ADDRESS_DECODE \
	(DELAY 1), $rdy_clr, %1, %2, %3, %4[0:26],\
	$_rr, @_rd, $_mr, @_md, @_pc
%endmacro

; ---------------------------------------------------------------------
#testcase 20 "Decode - R-, R10 (no decode r)"

CPU32_ADDRESS_DECODE_BOILERPLATE 0, 0, 1, 0x0BAFFFF

; Pseudo register file
; - R10 = 0x12345678
@_rd[31:0] = AND{32} $_re, (0x12345678[31:0])
$_rr = DELAY $_re
#testassert $_re @_ra[3:0] 10[3:0]
#testassert 1	$_me	0

; Final output
#testassert $done  $imd 0
;#testassert $done  @dest_addr[31:0] 0[31:0]
#testassert $done  @op1[31:0] 0[31:0]
#testassert $done  @op2[31:0] 0x12345678[31:0]
#testcomplete $done

#endtestcase

; ---------------------------------------------------------------------
#testcase 20 "Decode - R-, R10 (no decode r, switch)"
CPU32_ADDRESS_DECODE_BOILERPLATE 1, 0, 1, 0x0BAFFFF

; Pseudo register file
; - R10 = 0x12345678
@_rd[31:0] = AND{32} $_re, (0x12345678[31:0])
$_rr = DELAY $_re
#testassert $_re @_ra[3:0] 10[3:0]
#testassert 1	$_me	0

; Final output
#testassert $done  $imd 0
#testassert $done  @dest_addr[31:0] 10[31:0]
#testassert $done  @op1[31:0] 0x12345678[31:0]
#testassert $done  @op2[31:0] 0[31:0]
#testcomplete $done

#endtestcase

; ---------------------------------------------------------------------
#testcase 20 "Decode - R10, R11"
CPU32_ADDRESS_DECODE_BOILERPLATE 0, 1, 1, 0x0ABAAAA

; Pseudo register file
; - R10 = 0x12345678
; - R11 = 0xFEDCBA98
@_rd[31:0] = AND{32} (DELAY $_re), (NXOR{4,2} @_ra[3:0], 10[3:0]), (0x12345678[31:0])
@_rd[31:0] = AND{32} (DELAY $_re), (NXOR{4,2} @_ra[3:0], 11[3:0]), (0xFEDCBA98[31:0])
$_rr = DELAY{2} $_re
#testassert $_re @_ra[3:1] 11[3:1]	; 10/11 (differ by a bit)
#display 1 "_rd = %32x" @_rd[31:0]

; Simulated memory
; - Assert that memory is never accessed
#testassert 1	$_me	0

; Final output
#testassert $done  $imd 0
#testassert $done  @dest_addr[31:0] 10[31:0]
#testassert $done  @op1[31:0] 0x12345678[31:0]
#testassert $done  @op2[31:0] 0xFEDCBA98[31:0]
#testcomplete $done

#endtestcase

; ---------------------------------------------------------------------
#testcase 20 "Decode - R10, Imm20"
CPU32_ADDRESS_DECODE_BOILERPLATE 0, 1, 1, 0x1A12345

; Pseudo register file
; - R10 = 0x12345678
;@_rd[31:0] = AND{32} (DELAY $_re), (NXOR{4,2} @_ra[3:0], 10[3:0]), (0x12345678[31:0])
@_rd[31:0] = AND{32} (DELAY $_re), (0x12345678[31:0])
$_rr = DELAY{2} $_re
; - Only R10 is allowed to be accessed
#testassert $_re @_ra[3:0] 10[3:0]
; Simulated memory
; - Assert that memory is never accessed
#testassert 1	$_me	0

; Final output
#testassert $done  $imd 0
#testassert $done  @dest_addr[31:0] 10[31:0]
#testassert $done  @op1[31:0] 0x12345678[31:0]
#testassert $done  @op2[31:0] 0x00012345[31:0]
#testcomplete $done

#endtestcase

; ---------------------------------------------------------------------
; Tests Imm16 decode
; - Also uses $read_r = 0 to make test simpler
#testcase 20 "Decode - R-, Imm16 << 6"
CPU32_ADDRESS_DECODE_BOILERPLATE 0, 0, 1, 0x2037777

; No register/memory accesses allowed
#testassert 1	$_re	0
#testassert 1	$_me	0

; Final output
#testassert $done  $imd 0
#testassert $done  @dest_addr[31:0] 0[31:0]
#testassert $done  @op2[31:0] 0x001DDDC0[31:0]
#testcomplete $done

#endtestcase

; ---------------------------------------------------------------------
; Tests Imm16s decode
; - Also uses $read_r = 0 to make test simpler
#testcase 20 "Decode - R-, Imm16s << 12"
CPU32_ADDRESS_DECODE_BOILERPLATE 0, 0, 1, 0x3068777

; No register/memory accesses allowed
#testassert 1	$_re	0
#testassert 1	$_me	0

; Final output
#testassert $done  $imd 0
#testassert $done  @dest_addr[31:0] 0[31:0]
#testassert $done  @op2[31:0] 0xF8777FFF[31:0]
#testcomplete $done

#endtestcase

; ---------------------------------------------------------------------
; Tests [r+imm16] decode
; - Also uses $read_r = 0 to make test simpler
#testcase 50 "Decode - R-, [R15+imm16]"
CPU32_ADDRESS_DECODE_BOILERPLATE 0, 0, 1, 0x40F1234

; Registers
; - R15 = 0x00FF0000
$_rr = DELAY $_re
@_rd[31:0] = AND{32} $_re, @_ra, 0xFF1000[31:0]
#display $_re "@_ra" @_ra
#testassert $_re @_ra[3:0] 15[3:0]
; Memory
; - Must be 0xFF2234 (0xFF1000 + 0x1234)
$_mr = DELAY $_me
@_md[31:0] = AND{32} $_me, 0xF0E1D2C3[31:0]
#display $_me "@_ma" @_ma
#testassert $_me @_ma[31:0] 0x00FF2234[31:0]

; Final output
#testassert $done  $imd 0
#testassert $done  @dest_addr[31:0] 0[31:0]
#testassert $done  @op2[31:0] 0xF0E1D2C3[31:0]
#testcomplete $done

#endtestcase

; ---------------------------------------------------------------------
; Tests [r + ri<<s +imm8s] decode
; - Also uses $read_r = 0 to make test simpler
#testcase 100 "Decode - R-, [R15 + R14 << 4 + imm8s]"
CPU32_ADDRESS_DECODE_BOILERPLATE 0, 0, 1, 0x50FE9FC

; Registers
; - R15 = 0x00FF0000
$_rr = DELAY{2} $_re
@_rd[31:0] = AND{32} (DELAY $_re), (NOT   @_ra[0]), 0x000050[31:0]	; R14
@_rd[31:0] = AND{32} (DELAY $_re), (DELAY @_ra[0]), 0xFF1000[31:0]	; R15
#display $_re "@_ra" @_ra
#testassert $_re @_ra[3:1] 15[3:1]
; Memory
; 0xFF1000 + 0x000500 + 0xFFFFFFFC
; = 0x00FF14FC
$_mr = DELAY $_me
@_md[31:0] = AND{32} $_me, 0xF0E1D2C3[31:0]
#display $_me "@_ma" @_ma
#testassert $_me @_ma[31:0] 0x00FF14FC[31:0]

; Final output
#testassert $done  $imd 0
#testassert $done  @dest_addr[31:0] 0[31:0]
#testassert $done  @op2[31:0] 0xF0E1D2C3[31:0]
#testcomplete $done

#endtestcase

; ---------------------------------------------------------------------
; Tests [r+imm16] destination decode
#testcase 60 "Decode - R15, [R15+imm16] (switch)"
CPU32_ADDRESS_DECODE_BOILERPLATE 1, 1, 1, 0x4FF1234

; Registers
; - R15 = 0x00FF0000
$_rr = DELAY $_re
@_rd[31:0] = AND{32} $_re, @_ra, 0xFF1000[31:0]
#display $_re "@_ra" @_ra
#testassert $_re @_ra[3:0] 15[3:0]
; Memory
; - Must be 0xFF2234 (0xFF1000 + 0x1234)
$_mr = DELAY $_me
@_md[31:0] = AND{32} $_me, 0xF0E1D2C3[31:0]
#display $_me "@_ma" @_ma
#testassert $_me @_ma[31:0] 0x00FF2234[31:0]

; Final output
$hold = HOLD{10} $done
$comp = DELAY{10} $done
#testassert $hold  $done 1
#testassert $hold  $imd 1
#testassert $hold  @dest_addr[31:0] 0x00FF2234[31:0]
#testassert $hold  @op1[31:0] 0xF0E1D2C3[31:0]
#testassert $hold  @op2[31:0] 0x00FF1000[31:0]
#testcomplete $comp

#endtestcase

; ---------------------------------------------------------------------
; Tests [PC+imm16]
#testcase 60 "Decode - R15, [PC+imm16]"
CPU32_ADDRESS_DECODE_BOILERPLATE 1, 1, 1, 0x6F01234

; Registers
; - R15 = 0x00FF0000
$_rr = DELAY $_re
@_rd[31:0] = AND{32} $_re, @_ra, 0xFF1000[31:0]
#testassert $_re @_ra[3:0] 15[3:0]

@_pc[31:0] = DELAY 0xF000[31:0]

; Memory
; - Must be 0x10234 (0xF000 + 0x1234)
$_mr = DELAY $_me
@_md[31:0] = AND{32} $_me, 0xF0E1D2C3[31:0]
#display $_me "@_ma" @_ma
#testassert $_me @_ma[31:0] 0x00010234[31:0]

; Final output
$hold = HOLD{10} $done
$comp = DELAY{10} $done
#testassert $hold  $done 1
#testassert $hold  $imd 1
#testassert $hold  @dest_addr[31:0] 0x00010234[31:0]
#testassert $hold  @op1[31:0] 0xF0E1D2C3[31:0]
#testassert $hold  @op2[31:0] 0x00FF1000[31:0]
#testcomplete $comp

#endtestcase

; ---------------------------------------------------------------------
; Tests [PC + ri<<s +imm8s]
#testcase 100 "Decode - R15, [PC + R14 << 4 + imm8s] (switch)"
CPU32_ADDRESS_DECODE_BOILERPLATE 1, 1, 1, 0x7FFE9FC

; Registers
; - R15 = 0x00FF0000
$_rr = DELAY{2} $_re
@_rd[31:0] = AND{32} (DELAY $_re), (NOT   @_ra[0]), 0x000050[31:0]	; R14
@_rd[31:0] = AND{32} (DELAY $_re), (DELAY @_ra[0]), 0xFF1000[31:0]	; R15
#testassert $_re @_ra[3:1] 15[3:1]
; Memory
; 0xFF2000 + 0x000500 + 0xFFFFFFFC
; = 0x00FF24FC
#testassert $_me @_ma[31:0] 0x00FF24FC[31:0]
$_mr = DELAY $_me
@_md[31:0] = AND{32} $_me, 0xF0E1D2C3[31:0]
#display $_me "@_ma" @_ma

@_pc[31:0] = DELAY 0xFF2000[31:0]

; Final output
$hold = HOLD{10} $done
$comp = DELAY{10} $done
#testassert $hold  $done 1
#testassert $hold  $imd 1
#testassert $hold  @dest_addr[31:0] 0x00FF24FC[31:0]
#testassert $hold  @op1[31:0] 0xF0E1D2C3[31:0]
#testassert $hold  @op2[31:0] 0x00FF1000[31:0]
#testcomplete $comp

#endtestcase

; ---------------------------------------------------------------------
; Tests decoder reset (trivial)
#testcase 50 "Decode - R11, R10; reset"
CPU32_ADDRESS_DECODE_BOILERPLATE 0, 1, 1, 0x0BAFFFF

$_rr = DELAY $_re

#array state	6
$next = PULSE $done
@state = SEQUENCER{6} 1, 0, $next

// 0: Run 1 execute
$enable = DELAY @state[0]
// $next set by completion

// 1: Run 1 results
#testassert @state[1]	$imd 0
#testassert @state[1]	@dest_addr[31:0] 11[31:0]
#testassert @state[1]	@op1[31:0] 0[31:0]
#testassert @state[1]	@op2[31:0] 0[31:0]
$rdy_clr = PULSE @state[1]
$next = PULSE @state[1]

// 2: Clear in operation
$next = DELAY{10} @state[2]

// 3: Clear complete
#testassert @state[3]	$done 0
$next = DELAY{10} @state[3]

// 4: Run 2 execute
$enable = DELAY @state[4]

// 5: Run 2 results
#testassert @state[5]	$imd 0
#testassert @state[5]	@dest_addr[31:0] 11[31:0]
#testassert @state[5]	@op1[31:0] 0[31:0]
#testassert @state[5]	@op2[31:0] 0[31:0]

#testcomplete @state[5]

#endtestcase

; vim: ft=logiccircuit
