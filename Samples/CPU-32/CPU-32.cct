// 32-bit CPU
// By John Hodge (thePowersGang)
// Designed in LogicCircuit
%include "memory.cct"
%include "../adder.cct"
%include "../subber.cct"
%include "../shift_register.cct"
%include "address_decode.cct"
%include "alu.cct"
%include "registers.cct"
%include "common.h.cct"

%define NUM_FLAGS	4

%macro next_stage	3+
$_next_stage_%1 = %3
#display $_next_stage_%1 %2 0
$next_stage = PULSE $_next_stage_%1
%endmacro
%macro next_instruction	3+
$_next_instruction_%1 = %3
#display $_next_instruction_%1 %2 0
$next_instruction = PULSE $_next_instruction_%1
%endmacro

#defunit CPU32_CORE
#input $reset, $mem_ready, @mem_data_in[NUM_GPR_BITS], \
	$reg_ready, @reg_data_in[NUM_GPR_BITS], \
	@flags[NUM_FLAGS]
#output $ins_complete, $mem_enable, @mem_addr[NUM_ADDR_BITS], $mem_write, @mem_data_out[NUM_GPR_BITS], \
	$reg_enable, @reg_addr[4], $reg_write, @reg_data_out[NUM_GPR_BITS], \
	@flags_clear[NUM_FLAGS]

#array stage_num	4
#array stage_state	16

#array instr	32

#breakpoint $ins_complete "Next Instruction"
;#breakpoint $next_stage "Next Stage"
;#breakpoint $reg_pc_write "PC Write"
;#breakpoint $stage_reset "Stage Reset"

#display 1 "Stage %4x" @stage_num[3:0], @stage_state
#display 1 "Reset  " $stage_reset
#display 1 "NextS  " $next_stage
#display 1 "instr = 0x%32x" @instr[31:0]
#display 1 "NextI  " $next_instruction

$flags_C = @flags[0]
$flags_C_clear = @flags_clear[0]
$flags_O = @flags[1]
$flags_O_clear = @flags_clear[1]
$flags_Z = @flags[2]
$flags_Z_clear = @flags_clear[2]
$flags_S = @flags[3]
$flags_S_clear = @flags_clear[3]

// === Internal Registers ===
// --- Program Counter ---
#array pc	32
#array pc_new	32
#display $pc_clear "PC CLEAR" 0
#display 1 "PC = %32x" @pc[31:0]
$pc_clear = PULSE $reset
$NULL, @pc = LATCH{32} 1, $pc_clear, @pc_new
// --- Control Registers ---
// > CR0: Exception Return
#array cr0	32
#array cr0_new	32
$NULL, @cr0 = LATCH{32} 1, $cr0_clear, @cr0_new
// > CR1: Exception Reason
#array cr1	32
#array cr1_new	32
$NULL, @cr1 = LATCH{32} 1, $cr1_clear, @cr1_new
#display 1 "CR0 = %32x  CR1 = %32x" @cr0[31:0], @cr1[31:0]

// === "Temporary" Latches ===
// @instr - Temporary "variables" used to hold intermediate values
// to be moved to other locations
#display 1 "instr_clear=%1i" $instr_clear
$NULL, @instr = LATCH{32} 1, $instr_clear, @instr
$instr_clear = PULSE @stage_state[0]	// Clear the instruction register

// === Timing control (stages) ===
// 4-bit counter reset by $stage_reset, incremented by $next_stage
// Attached to a 4-bit de-muxer controlling the state of stages
@stage_num = COUNTER{4} $stage_reset, $next_stage
@stage_state = DEMUX{4} 1, @stage_num

// === Next instruction ===
$ins_complete = DELAY{2} (PULSE $next_instruction)
$stage_reset = PULSE $next_instruction
$stage_reset = DELAY $reset

// =============================
// === Stage 0: Opcode Fetch ===
// =============================
#display @stage_state[0] "Opcode fetch" 1
// - Request memory
@mem_addr    = AND{NUM_ADDR_BITS} @stage_state[0], @pc	// Set memory address to PC
$mem_enable  = PULSE @stage_state[0]	// Enable memory for read
// - Read complete, save into @instr
@instr = AND{32} @stage_state[0], $mem_ready, @mem_data_in	// Save the opcode
next_stage OPRDY, "next_stage (OPRDY)", AND @stage_state[0], $mem_ready

// =============================
// === Stage 1: Increment PC ===
// =============================
#display @stage_state[1] "PC Update" 1
// - Add 4 to PC
#array _pc_new 32
#array pc_inc_value 32	// value to increment to
#display @stage_state[1] "PC Inc Value = %32x" @pc_inc_value[31:0]
$increment_pc = PULSE @stage_state[1]	// Increment the program counter too
@pc_inc_value[0:31] = AND{32} (NOT $alt_pc_inc_value), 4[0:31]
$_pc_clear, @_pc_new, $NULL = ADDER_32BIT $increment_pc, @pc, @pc_inc_value, 0
// Write back
$pc_clear = DELAY $_pc_clear
#display $pc_clear "_pc_new = %32x" @_pc_new[0:31]
@pc_new = DELAY{2} @_pc_new
; Don't move to decode until PC is updated
next_stage PCCLR, "next_stage (PCCLR)", DELAY $_pc_clear

// ================================
// === Stage 2: Opcode Decoding ===
// ================================
#array alu_addr 	NUM_GPR_BITS
#array alu_in_dst	NUM_GPR_BITS
#array alu_in_src	NUM_GPR_BITS
#array alu_out  	NUM_GPR_BITS

#display @stage_state[2] "Opcode decode" 1
$decode_enable = OR @stage_state[2:15]
; 0xxxxmmm	- General ALU stuff
$is_ALU     = AND $decode_enable, (NOT   @instr[31])
; 100xxxxx	- Conditional branches
$is_BRANCH  = AND $decode_enable, (NXOR{3,2} @instr[31:29], 0b100[2:0])
; 1010xmmm xxxxxxxx	- Indirect Branch
$is_IBRANCH = AND $decode_enable, (NXOR{4,2} @instr[31:28], 0b1010[3:0])
; 10110mmm 000xxxxx	- Push/Pop
$is_PUSHPOP = AND $decode_enable, (NXOR{8,2} @instr[31:27],@instr[23:21], 0b01100000[7:0])
; 10110mmm 001xxxxx	- BSWAP[W]
;$is_BSWAP   = AND $decode_enable, (NXOR{8,2} @instr[31:27],@instr[23:21], 0b01100001[7:0])
; 10111000 00000000	- Load Flags
$is_LDF     = AND $decode_enable, (NXOR{16,2} @instr[31:16], 0xB800[15:0])
; 10111000 00000001 00000000	- MCR
$is_MCR     = AND $decode_enable, (XNOR{24,2} @instr[31:8], 0xB80100[23:0])
; 10111000 00000001 00000001	- MRC
$is_MRC     = AND $decode_enable, (XNOR{24,2} @instr[31:8], 0xB80101[23:0])
; 10111000 0000001x	- Shift / Rotate
$is_SHIFT   = AND $decode_enable, (XNOR{15,2} @instr[31:17], 0xB802[15:1])
; 101111mm	- LEA R, op2
$is_LEA     = AND $decode_enable, (NXOR{6,2} @instr[31:26], 0b101111[5:0])
; 1100xxxx	- Non-word Load/Store
;$is_NONWLS  = AND $decode_enable, (NXOR{4,2} @instr[31:28], 0b1100[3:0])

// === Handle Undefined Opcodes ===
$is_invl = NOR $is_ALU, $is_BRANCH, $is_IBRANCH, $is_LDF, $is_MRC, $is_MCR, $is_SHIFT, $is_LEA
$is_UNDEF = AND (DELAY{2} $decode_enable), $is_invl
#display $is_UNDEF "UNDEFINED INSTRUCTION!" 0
#breakpoint $is_UNDEF "#UD"
; - Set CRs
$cr0_clear = PULSE $is_UNDEF
@cr0_new = AND{32} (PULSE $is_UNDEF), @pc
$cr1_clear = PULSE $is_UNDEF
@cr1_new = AND{32} (PULSE $is_UNDEF), @instr
; - Set PC=0x0000000C
$_undef_pulse = PULSE $is_UNDEF
$pc_clear = DELAY $_undef_pulse
@pc_new[0:31] = DELAY (AND{32} $_undef_pulse, 0x8[0:31])
next_instruction UNDEF, "next_instruction (UNDEF)", DELAY{3} $_undef_pulse

// === Address/Operand Decoding ===
$no_decode_r = AND $decode_enable, $is_IBRANCH
$no_decode_r = AND $decode_enable, (NXOR{5,2} @instr[31:27], 0b00000[4:0])	// MOV
$no_read_m   = AND $decode_enable, (NXOR{5,2} @instr[31:27], 0b01000[4:0])	// Reversed MOV
;$no_decode_r = AND $decode_enable, $is_PUSHPOP
;$no_read_m   = AND $decode_enable, $is_PUSHPOP, @instr[20]
$no_read_m       = AND $decode_enable, $is_LEA
$no_decode_r     = AND $decode_enable, $is_LEA
$switch_operands = AND $decode_enable, $is_LEA
// - Swap ALU operands
$switch_operands = AND $decode_enable, $is_ALU, @instr[30]
// - Push/Swap uses swapped operands
;$switch_operands = AND $decode_enable, $is_PUSHPOP

$decode_start = AND @stage_state[2], $is_ALU
$decode_start = AND @stage_state[2], $is_IBRANCH
$decode_start = AND @stage_state[2], $is_LEA
$decode_clear = PULSE @stage_state[4]
$decode_clear = PULSE @stage_state[0]

#display $decode_start "Decode @instr=%32x" @instr
$decode_complete, $addr_is_mem, @alu_addr, @alu_in_dst, @alu_in_src,\
	$reg_enable, @reg_addr, $mem_enable, @mem_addr = CPU32_ADDRESS_DECODE \
	$decode_start, $decode_clear, $switch_operands, (NOT $no_decode_r), (NOT $no_read_m), @instr[0:26], \
	$reg_ready, @reg_data_in, $mem_ready, @mem_data_in, @pc

#display $decode_complete "@alu_addr   = %32x" @alu_addr[31:0]
#display $decode_complete "@alu_in_dst = %32x" @alu_in_dst[31:0]
#display $decode_complete "@alu_in_src = %32x" @alu_in_src[31:0]
//next_stage DecodeComplete, "next_stage (Decode Complete)", $decode_complete

// --- Stage 2.5 ALU Core ---
$alu_data_rdy = AND $is_ALU, $decode_complete
$alu_done, $alu_nosave, @alu_out, $flags_C_clear, $flags_O_clear, $flags_Z_clear \
	= CPU32_ALU $alu_data_rdy, @instr[27:29], @alu_in_dst, @alu_in_src,\
	$flags_C, $flags_O, $flags_Z
next_stage ALUDONE, "next_stage (ALUDONE)", $alu_done
// --- Stage 3: Save ALU Data ---
#display @stage_state[3] "Data save" 1
$alu_save = AND @stage_state[3], $is_ALU
// - Save to memory
$_alu_save_mem = AND $alu_save, (NOT $alu_nosave), $addr_is_mem
#display $_alu_save_mem "Memory 0x%32x = 0x%32x" @alu_addr[31:0], @alu_out[31:0]
@mem_addr     = AND{32} $_alu_save_mem, @alu_addr
@mem_data_out = AND{32} $_alu_save_mem, @alu_out
$mem_write  = DELAY $_alu_save_mem
$mem_enable = DELAY $_alu_save_mem
next_stage ALUMEMSAVE, "next_stage (ALUMEMSAVE)", AND $_alu_save_mem, $mem_ready
// - Save to register
$_alu_save_reg = AND $alu_save, (NOT $alu_nosave), (NOT $addr_is_mem)
#display $_alu_save_reg "Register 0x%4x = 0x%32x" @alu_addr[3:0], @alu_out[31:0]
@reg_addr[3:0] = AND{4} $_alu_save_reg, @alu_addr[3:0]
@reg_data_out = AND{32} $_alu_save_reg, @alu_out
$reg_write = DELAY $_alu_save_reg
$reg_enable = DELAY $_alu_save_reg
next_stage ALUREGSAVE, "next_stage (ALUREGSAVE)", DELAY{4} $_alu_save_reg
// - No writeback
next_stage ALUNOSAVE, "next_stage (ALUNOSAVE)", AND $alu_save, $alu_nosave
#display $_next_stage_ALUNOSAVE "Not saving 0x%32x" @alu_out[31:0]
// --- ALU Done ---
next_instruction ALUCOMPLETE, "next_instruction (ALU Complete)", AND $is_ALU, @stage_state[4]

// === Load Flags (LDF) ===
@flags_clear[0:3] = AND{4} (PULSE $is_LDF), (NOT   @instr[8:11])
@flags[0:3]       = AND{4} (PULSE $is_LDF), (DELAY @instr[0:3])
next_instruction LDF, "next_instruction (LDF)", DELAY{3} $is_LDF

// === MCR ===
$reg_enable = DELAY $is_MCR
@reg_addr[0:3] = AND{4} $is_MCR, @instr[0:3]
;$NULL*64,@cr2,@cr3,$NULL*384 = DEMUX{4,32} (AND{4} $reg_ready, $is_MCR, @instr[7:4]), (DELAY @reg_data_in)
next_instruction MCR, "next_instruction (MCR)", DELAY{2} (AND $reg_ready, $is_MCR)

// === MRC ===
@reg_addr[0:3] = AND{4} $is_MRC, @instr[0:3]
@reg_data_out = MUX{4,32} $is_MRC, @instr[4:7], @cr0, @cr1, 0*32, 0*32, 0*128, 0*256
$reg_enable = PULSE $is_MRC
$reg_write = PULSE $is_MRC
next_instruction MRC, "next_instruction (MRC)", DELAY{4} $is_MRC

// === Shift / Rotate ===
#array _shift_count 5
#array _shift_value 33
#array _shift_value_nc 32
#array _shift_out 33
#array _shift_out_nc 32
// Use ALU latches for temp storage
// - This is a little evil, as these latches are in CPU32_ADDRESS_DECODE
@_shift_count[0:4] = @alu_in_src[0:4]
#display $is_SHIFT "_shift_count = %5x" @_shift_count[4:0]
@_shift_value[0:31] = @alu_in_dst[0:31]
@_shift_value[32] = @alu_in_src[16]
@_shift_value_nc[0:31] = @alu_addr[0:31]
// Prepare arguments
// - Count imm5
@_shift_count[0:4] = AND{5} $is_SHIFT, (DELAY @instr[5]), @instr[0:4]
next_stage ShiftImm5, "next_stage (Shift Imm5)", AND $is_SHIFT, @stage_state[2], (DELAY @instr[5])
// - Count r
$_shift_readRv = AND $is_SHIFT, @stage_state[2], (NOT @instr[5])
$reg_enable = AND $_shift_readRv
@reg_addr[0:3] = AND{4} $_shift_readRv, @instr[0:3]
@_shift_count[0:4] = AND{5} $_shift_readRv, $reg_ready, @reg_data_in[0:4]
next_stage ShiftRv, "next_stage (Shift Rv)", AND $_shift_readRv, $reg_ready
// - Value
$_shift_value_reading = AND $is_SHIFT, @stage_state[3]
$reg_enable = PULSE $_shift_value_reading
@reg_addr[0:3] = AND{4} $_shift_value_reading, @instr[8:11]
@_shift_value[0:32] = AND{33} $_shift_value_reading,$reg_ready,(NOT   @instr[7]), $flags_C,@reg_data_in[0:31]
@_shift_value[0:32] = AND{33} $_shift_value_reading,$reg_ready,(DELAY @instr[7]), @reg_data_in[31:0],$flags_C
@_shift_value_nc[0:31] = AND{32} $_shift_value_reading,$reg_ready,(NOT   @instr[7]), @reg_data_in[0:31]
@_shift_value_nc[0:31] = AND{32} $_shift_value_reading,$reg_ready,(DELAY @instr[7]), @reg_data_in[31:0]
next_stage ShiftVal, "next_stage (Shift Value)", AND $_shift_value_reading, $reg_ready
// Clear CF if it is used
$flags_C_clear = PULSE (AND $is_SHIFT, @stage_state[4], (DELAY @instr[6]))
$_shl_enable = AND $is_SHIFT, @stage_state[4], (NOT   @instr[16])
$_rol_enable = AND $is_SHIFT, @stage_state[4], (DELAY @instr[16]), (NOT   @instr[6])
$_rcl_enable = AND $is_SHIFT, @stage_state[4], (DELAY @instr[16]), (DELAY @instr[6])
// Perform shift
#display $_shl_enable "SHL: _shift_value = %33x" @_shift_value
#display $_rcl_enable "RCL: _shift_value = %33x" @_shift_value
#display $_rol_enable "ROL: _shift_value = %32x" @_shift_value_nc
$_shift_done, @_shift_out = SHIFT_LEFT_N_32 $_shl_enable, @_shift_count, @_shift_value
$_shift_done, @_shift_out = ROTATE_LEFT_N_33 $_rcl_enable, @_shift_count, @_shift_value
$_shift_done, @_shift_out_nc = ROTATE_LEFT_N_32 $_rol_enable, @_shift_count, @_shift_value_nc
next_stage ShiftDone, "next_stage (Shift Done)", $_shift_done
#display $_shift_done "_shift_out = %33x" @_shift_out
// Write back shifted value
$_shift_writeback = AND $is_SHIFT, @stage_state[5]
$reg_write = PULSE $_shift_writeback
@reg_addr[0:3] = AND{4} $_shift_writeback, @instr[12:15]
$reg_enable = PULSE $_shift_writeback
$flags_C,@reg_data_out[0:31] = AND{33} $_shift_writeback, (NOT   @instr[7]), @_shift_out[0:32]
@reg_data_out[31:0],$flags_C = AND{33} $_shift_writeback, (DELAY @instr[7]), @_shift_out[0:32]
@reg_data_out[0:31] = AND{32} $_shift_writeback, (NOT   @instr[16]), @_shift_out_nc[0:31]
@reg_data_out[31:0] = AND{32} $_shift_writeback, (DELAY @instr[16]), @_shift_out_nc[0:31]
// Operation complete
next_instruction Shift, "next_instruction (Shift)", DELAY{5} $_shift_writeback

// === Load Effective Address (LEA) ===
$_LEA_active = AND $is_LEA, $decode_complete
$reg_enable = PULSE $_LEA_active
$reg_write = PULSE $_LEA_active
@reg_addr[0:3] = AND{4} $_LEA_active, @instr[20:23]
@reg_data_out[0:31] = AND{32} $_LEA_active, @alu_addr[0:31]
next_instruction LEA, "next_instruction (LEA)", DELAY{3} $_LEA_active

// === Conditional Jumps / Calls ===
#array cond 8
@cond = DEMUX{3} $is_BRANCH, @instr[27:25]
$cond_inverse = AND $is_BRANCH, @instr[24]
$cond_call = AND $is_BRANCH, (DELAY @instr[28])	// bit 28 selects call/BX (as opposed to just jmp)
$cond_jump = AND $is_BRANCH, (NOT   @instr[28])	// ^^^
@cond = DEMUX{3} $is_IBRANCH, @instr[23:21]
$cond_inverse = AND $is_IBRANCH, @instr[20]
$cond_call = AND $is_IBRANCH, (DELAY @instr[27])	// bit 27 selects call/BX (as opposed to just jmp)
$cond_jump = AND $is_IBRANCH, (NOT   @instr[27])	// ^^^

$condition_true = AND @cond[0], $flags_Z
$condition_true = AND @cond[1], $flags_C
$condition_true = AND @cond[2], $flags_S
$condition_true = AND @cond[3], $flags_O
$condition_true = AND @cond[4], (NXOR $flags_O, $flags_Z)	; OF!=ZF
$condition_true = AND @cond[5], (NOR $flags_O, $flags_Z)	; OF=0,ZF=0
$condition_true = AND @cond[6], (NOR $flags_C, $flags_Z)	; CF=0,ZF=0
$condition_true = DELAY @cond[7]
$_jump_cond = XOR $condition_true, $cond_inverse

next_stage JMPDEC, "next_stage (JMPDEC)", DELAY{4} $is_BRANCH
next_stage IJMPDEC, "next_stage (IJMPDEC)", AND $is_IBRANCH, $decode_complete

#display @stage_state[3] "%1i(_jump_cond) = %1i(condition_true) ^ %1i(cond_inverse)" $_jump_cond, $condition_true, $cond_inverse

// - Not branching? Next instruction
next_instruction NOJMP, "next_instruction (Not Jumping)", AND @stage_state[3], (OR $is_IBRANCH, $is_BRANCH), (NOT $_jump_cond)

// - Just branch, next stage
next_stage JMP,  "next_stage (JMP)",  AND @stage_state[3], $is_BRANCH, $_jump_cond, $cond_jump
next_stage IJMP, "next_stage (IJMP)", AND @stage_state[3], $is_IBRANCH, $_jump_cond, $cond_jump
// - Branch+exchange, save PC to R14
$_do_call = AND @stage_state[3], $is_BRANCH, $_jump_cond, $cond_call
@reg_addr[3:0] = AND{4} $_do_call, 14[3:0]	; R14 = LR
@reg_data_out[31:0] = AND{32} $_do_call, @pc[31:0]
$reg_enable = PULSE $_do_call
$reg_write = PULSE $_do_call
next_stage BXLRSAVED, "next_stage (BXLRSAVED)", AND $_do_call, $reg_ready

// - Actually do update
$do_jump = AND $is_BRANCH, @stage_state[4]
$alt_pc_inc_value = DELAY $do_jump
$_jmp_sign_bit = @instr[23]
@pc_inc_value[31:0] = AND{32} $do_jump, $_jmp_sign_bit*6, @instr[23:0],0,0 	// 24 bit signed * 4
#display $alt_pc_inc_value "@pc_inc_value = 0x%32x" @pc_inc_value[31:0]
//  > Delay is to ensure the alt_pc_inc_value has taken effect (the hard 0x4 is turned off)
$increment_pc = DELAY (PULSE $do_jump)
// - Next stage when PC is updated
next_instruction JMP, "next_instruction (Branch Complete)", AND $is_BRANCH, @stage_state[5]
// -- IJMP - Set PC
$do_ijump = AND $is_IBRANCH, @stage_state[4]
$pc_clear = DELAY $do_ijump
@pc = AND{32} (DELAY{2} $do_ijump), @alu_in_src
next_instruction IJMP, "next_instruction (IBranch Complete)", DELAY{5} $do_ijump

#endunit

%include "CPU-32_tests.cct"

// ====================================================================
//                           Root Version
// ====================================================================

// --- FLAGS Pseudo-Register ---
#array flags	NUM_FLAGS
#array flags_clear	NUM_FLAGS
$NULL, @flags[0] = LATCH 1, @flags_clear[0], @flags[0]	// 'C' Flag
$NULL, @flags[1] = LATCH 1, @flags_clear[1], @flags[1]	// 'O' Flag
$NULL, @flags[2] = LATCH 1, @flags_clear[2], @flags[2]	// 'Z' Flag
$NULL, @flags[3] = LATCH 1, @flags_clear[3], @flags[3]	// 'S' Flag
#display 1 "CF" @flags[0]
#display 1 "OF" @flags[1]
#display 1 "ZF" @flags[2]
#display 1 "SF" @flags[3]

// -- GP Registers ---
#array reg_addr	4
#array reg_data_in	32
#array reg_data_out	32
$reg_ready, @reg_data_in = REGISTER_BANK_16_32 $reg_enable, @reg_addr, $reg_write, @reg_data_out
#display $reg_enable "Register Addr" @reg_addr[0:3]
#display $reg_write  "Register Value New %32x" @reg_data_out[NUM_GPR_BITS-1:0]
#display $reg_ready  "Register Value %32x" @reg_data_in[NUM_GPR_BITS-1:0]

// --- Memory ---
#array mem_addr	32
#array mem_data_in	32
#array mem_data_out	32
$mem_ready, @mem_data_in, $fault_ac = MEMORY_SPACE $mem_enable, @mem_addr, $mem_write, @mem_data_out, 0,0
#display $mem_enable "MemAddr" @mem_addr[NUM_ADDR_BITS-1:0]
#display $mem_write "MemOut " @mem_data_out[31:0]
#display $mem_ready "MemIn  " @mem_data_in[NUM_GPR_BITS-1:0]

// --- CPU ---
$rst = PULSE 1
$instr_pulse, $mem_enable, @mem_addr, $mem_write, @mem_data_out, \
	$reg_enable, @reg_addr, $reg_write, @reg_data_out, @flags_clear \
	= CPU32_CORE $rst, $mem_ready, @mem_data_in, $reg_ready, @reg_data_in, @flags

; vim: ft=logiccircuit
