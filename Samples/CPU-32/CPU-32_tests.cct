
// ====================================================================
//                             Test Cases
// ====================================================================

// --- Boilerplate for tests ---
%macro __CPU32_TEST_WRAPPER 1
#array flags	NUM_FLAGS
#array flags_set	NUM_FLAGS
#array flags_clear	NUM_FLAGS
#array reg_addr	4
#array reg_data_in	NUM_GPR_BITS
#array reg_data_out	NUM_GPR_BITS
#array mem_addr	NUM_ADDR_BITS
#array mem_data_in	NUM_GPR_BITS
#array mem_data_out	NUM_GPR_BITS
#array mem_size	2

%if %1 == 1
$ins_end, $mem_enable, @mem_addr, @mem_size, $mem_write, @mem_data_out, \
	$reg_enable, @reg_addr, $reg_write, @reg_data_out, @flags_clear,@flags_set \
	= CPU32_CORE (PULSE 1), $mem_ready, @mem_data_in, $reg_ready, @reg_data_in, @flags
%endif
%endmacro

%macro __stage 2
#array stage %1
@stage = SEQUENCER{%1} 1, 0, $ins_end
%if %2 > 1
#array op_stage %2
@op_stage = SEQUENCER{%2} 1, $ins_end, (PULSE $mem_enable)
%else
#array op_stage 1
@op_stage[0] = DELAY 1
%endif
%endmacro

%macro __memrd 4
#testassert @stage[%1],@op_stage[%2],$mem_enable @mem_addr[0:31] %3[0:31]
@mem_data_in[0:31] = AND{32} @stage[%1],@op_stage[%2],$mem_enable,%4[0:31]
#testassert @stage[%1],@op_stage[%2],$mem_enable $mem_write 0
#testassert @stage[%1],@op_stage[%2],$mem_enable @mem_size 0b00[0:1]
%endmacro

%macro __memrd16 4
%assign bitofs ((%3 / 2) % 2)*16
%assign bitofs_rev 31-bitofs
#testassert @stage[%1],@op_stage[%2],$mem_enable @mem_addr[0:31] %3[0:31]
@mem_data_in[0:31] = AND{32} @stage[%1],@op_stage[%2],$mem_enable,0*bitofs,%4[0:bitofs_rev]
#testassert @stage[%1],@op_stage[%2],$mem_enable $mem_write 0
#testassert @stage[%1],@op_stage[%2],$mem_enable @mem_size 0b01[0:1]
%endmacro

%macro __memrd8 4
%assign bitofs (%3 % 4)*8
%assign bitofs_rev 31-bitofs
#testassert @stage[%1],@op_stage[%2],$mem_enable @mem_addr[0:31] %3[0:31]
@mem_data_in[0:31] = AND{32} @stage[%1],@op_stage[%2],$mem_enable,0*bitofs,%4[0:bitofs_rev]
#testassert @stage[%1],@op_stage[%2],$mem_enable $mem_write 0
#testassert @stage[%1],@op_stage[%2],$mem_enable @mem_size 0b10[0:1]
%endmacro

%macro __memwr 4
#testassert @stage[%1],@op_stage[%2],$mem_enable @mem_addr[0:31] %3[0:31]
#testassert @stage[%1],@op_stage[%2],$mem_enable @mem_data_out[0:31] %4[0:31]
#testassert @stage[%1],@op_stage[%2],$mem_enable $mem_write 1
#testassert @stage[%1],@op_stage[%2],$mem_enable @mem_size 0b00[0:1]
%endmacro

%macro __memwr16 4
%assign bitofs ((%3 / 2) % 2)*16
%assign bitofs_end bitofs+15
#testassert @stage[%1],@op_stage[%2],$mem_enable @mem_addr[0:31] %3[0:31]
#testassert @stage[%1],@op_stage[%2],$mem_enable @mem_data_out[bitofs:bitofs_end] %4[0:15]
#testassert @stage[%1],@op_stage[%2],$mem_enable $mem_write 1
#testassert @stage[%1],@op_stage[%2],$mem_enable @mem_size 0b01[0:1]
%endmacro

%macro __memwr8 4
%assign bitofs (%3 % 4)*8
%assign bitofs_end bitofs+7
#testassert @stage[%1],@op_stage[%2],$mem_enable @mem_addr[0:31] %3[0:31]
#testassert @stage[%1],@op_stage[%2],$mem_enable @mem_data_out[bitofs:bitofs_end] %4[0:7]
#testassert @stage[%1],@op_stage[%2],$mem_enable $mem_write 1
#testassert @stage[%1],@op_stage[%2],$mem_enable @mem_size 0b10[0:1]
%endmacro


// --- Test Case : Single instruction ---
#testcase 100 "CPU - MOV R15, R15"
__CPU32_TEST_WRAPPER 1

// - Register accesses should only be R15
#testassert $reg_enable @reg_addr[0:3] 15[0:3]
$reg_ready = DELAY $reg_enable
@reg_data_in[31:0] = AND{32} $reg_enable, 0x10F0[31:0]
// - Register write 0x10F0
#testassert $reg_write @reg_data_out[31:0] 0x10F0[31:0]
// - One memory read from 0 (Fetch)
#testassert $mem_enable @mem_addr[31:0] 0x00000000[31:0]
$mem_ready = DELAY $mem_enable
@mem_data_in[0:31] = AND{32} $mem_enable, 0x00FF0000[0:31]
// - Flags should not be changed
#testassert 1 @flags[2:0]	0[2:0]

#testcomplete $ins_end
#endtestcase

// --- Test Case: Two Instructions ---
#testcase 200 "CPU - MOV R0, R0; MOV R15, R15"
__CPU32_TEST_WRAPPER 1

__stage 3,0
$mem_ready = DELAY $mem_enable

// - #1: R0=0x43211234, Mem=0
__memrd 0,0, 0x00000000, 0x00000000
#testassert @stage[0],$reg_enable  @reg_addr[3:0]  0[3:0]
$reg_ready = AND $reg_enable, @stage[0]
@reg_data_in[31:0] = AND{32} $reg_enable, @stage[0], 0x43211234[31:0]
#testassert @stage[0],$reg_write  @reg_data_out[31:0]  0x43211234[31:0]
// - #2: R15=0xF00DCAFE, Mem=4
__memrd 1,0, 0x00000004, 0x00FF0000
#testassert @stage[1],$reg_enable  @reg_addr[3:0]  15[3:0]
$reg_ready = AND @stage[1], $reg_enable
@reg_data_in[31:0] = AND{32} $reg_enable, @stage[1], 0xF00DCAFE[31:0]
#testassert @stage[1],$reg_write  @reg_data_out[31:0]  0xF00DCAFE[31:0]
// - Flags should not be changed
#testassert 1 @flags[2:0]	0[2:0]

#testcomplete @stage[2]
#endtestcase

#testcase 1000 "CPU - Multiple Instructions"
__CPU32_TEST_WRAPPER 1
__stage 12,0
$mem_ready = DELAY $mem_enable
#testassert 1 $reg_enable 0

// Jump never
@mem_data_in[0:31] = AND{32} $mem_enable, 0x8F000000[0:31]

#testassert @stage[0],$mem_enable	@mem_addr[0:31]	0x00[0:31]
#testassert @stage[1],$mem_enable	@mem_addr[0:31]	0x04[0:31]
#testassert @stage[2],$mem_enable	@mem_addr[0:31]	0x08[0:31]
#testassert @stage[3],$mem_enable	@mem_addr[0:31]	0x0C[0:31]
#testassert @stage[4],$mem_enable	@mem_addr[0:31]	0x10[0:31]
#testassert @stage[5],$mem_enable	@mem_addr[0:31]	0x14[0:31]
#testassert @stage[6],$mem_enable	@mem_addr[0:31]	0x18[0:31]
#testassert @stage[7],$mem_enable	@mem_addr[0:31]	0x1C[0:31]
#testassert @stage[8],$mem_enable	@mem_addr[0:31]	0x20[0:31]
#testassert @stage[9],$mem_enable	@mem_addr[0:31]	0x24[0:31]
#testassert @stage[10],$mem_enable	@mem_addr[0:31]	0x28[0:31]

#testcomplete @stage[11]
#endtestcase

#testcase 700 "CPU - Jump Conditions"
__CPU32_TEST_WRAPPER 1
__stage 7,0

$mem_ready = DELAY $mem_enable
#testassert 1 $reg_enable 0

// - #1: JMP.N .+16*4 (never)
__memrd 0,0, 0x00000000, 0x8F000010
// - #2: JMP.A .+1*4 (always)
__memrd 1,0, 0x00000004, 0x8E000001
// - #3: JMP.Z .+1*4 (zero, fail)
__memrd 2,0, 0x0000000C, 0x80000001
// - #3: JMP.Z .+1*4 (zero, succeed)
__memrd 3,0, 0x00000010, 0x80000001
@flags[2] = DELAY @stage[3]
// - #4: JMP.A .-4
__memrd 4,0, 0x00000018, 0x8EFFFFFF
// - Dummy instruction to test the final address
__memrd 5,0, 0x00000018, 0x8EFFFFFF

#testcomplete @stage[6]
#endtestcase

#testcase 300 "CPU - 32-Bit chained ADD (MOVI,ADDI,ADDI)"
__CPU32_TEST_WRAPPER 1
__stage 4, 0

$mem_ready = DELAY $mem_enable
$reg_ready, @reg_data_in = REGISTER_BANK_16_32 $reg_enable, @reg_addr, $reg_write, @reg_data_out

$NULL, $reg_write_latched = LATCH 1, $ins_end, $reg_write
//#testassert (DELAY $reg_write_latched) (PULSE $reg_write) 0	// Only one reg write per operation

// - MOV R0, 0x12345
__memrd 0,0, 0x00,0x01012345
#testassert @stage[0],$reg_enable  $reg_write 1
#testassert @stage[0],$reg_enable  @reg_addr[0:3] 0[0:3]
#testassert @stage[0],$reg_enable  @reg_data_out[0:31] 0x12345[0:31]
#testassert @stage[0],$ins_end $reg_write_latched 1

// - ADD R0, 0xFEDCB
__memrd 1,0, 0x04,0x210FEDCB
#testassert @stage[1],$reg_enable @reg_addr[0:3] 0[0:3]
#testassert @stage[1],$reg_write  @reg_data_out[0:31] 0x00111110[0:31]
#testassert @stage[1],$ins_end $reg_write_latched 1

// - ADD R0, 0xFFF0<<16
__memrd 2,0, 0x08,0x2208FFF0
#testassert @stage[2],$reg_write @reg_addr[0:3] 0[0:3]
#testassert @stage[2],$reg_write @reg_data_out[0:31] 0x00011110[0:31]
#testassert @stage[2],$ins_end $reg_write_latched 1
// TODO: Check that the carry bit was set correctly

#testcomplete @stage[3]

#endtestcase

#testcase 700 "CPU - Indirect Jump"
__CPU32_TEST_WRAPPER 1
__stage 4, 0

$mem_ready = DELAY $mem_enable
$reg_ready = DELAY $reg_enable
#testassert $reg_enable $reg_write 0
#testassert $reg_enable @reg_addr[0:3] 11[0:3]

// No jump to 0x50
__memrd 0,0, 0x00,0xA0FB0000
@reg_data_in[0:31] = AND{32} @stage[0], $reg_enable, 0x50[0:31]

// Jump to 0x60
__memrd 1,0, 0x04,0xA0EB0000
@reg_data_in[0:31] = AND{32} @stage[1], $reg_enable, 0x60[0:31]

// No jump to -1
@reg_data_in[0:31] = AND{32} @stage[0], $reg_enable, 1*32
__memrd 2,0, 0x60,0xA0FB0000

#testcomplete @stage[3]
#endtestcase

#testcase 120 "CPU - Call"
__CPU32_TEST_WRAPPER 1
__stage 3, 0

$mem_ready = DELAY $mem_enable
$reg_ready = DELAY $reg_enable

#testassert $reg_enable $reg_write 1
#testassert $reg_enable @reg_addr[3:0] 14[3:0]

#testassert $mem_enable,@stage[0] @mem_addr[31:0] 0[31:0]
@mem_data_in[0:31] = AND{32} @stage[0], $mem_enable, 0x9E7FFFFF[0:31]
#testassert $reg_enable,@stage[0] @reg_data_out[31:0] 4[31:0]

#testassert $mem_enable,@stage[1] @mem_addr[31:0] 0x2000000[31:0]
@mem_data_in[0:31] = AND{32} @stage[1], $mem_enable, 0x8F000000[0:31]

#testcomplete @stage[2]

#endtestcase


//#testcase 100 "CPU - LDF (clear)"
//
//#testassert $ins_end @
//
//#testcomplete $ins_end
//#endtestcase

#testcase 100 "CPU - LEA"

__CPU32_TEST_WRAPPER 1

#testassert $reg_enable @reg_addr[3:0] 0x8[3:0]
#testassert $reg_enable $reg_write 1
#testassert $reg_enable @reg_data_out[31:0] 0x00001238[31:0]

$mem_ready = DELAY $mem_enable
@mem_data_in[0:31] = AND{32} $mem_enable, 0xBE801234[0:31]

#testcomplete $ins_end
#endtestcase

//
// Test memory acesses with a high address
//
#testcase 300 "CPU - Memory Read/Write (0x10100000)"
__CPU32_TEST_WRAPPER 1
#array stage 6
@stage = SEQUENCER{6} 1, 0, $mem_ready

$reg_ready,@reg_data_in = REGISTER_BANK_16_32 $reg_enable,@reg_addr,$reg_write,@reg_data_out
$mem_ready = PULSE $mem_enable

@mem_data_in[0:31] = AND{32} @stage[0], $mem_enable, 0x020A0101[0:31] ;	MOV R0, 0x101<<20
#testassert @stage[0],$mem_enable @mem_addr[0:31] 0x00000000[0:31]
#testassert @stage[0],$mem_enable $mem_write 0
#testassert @stage[1],$reg_enable $reg_write 1
#testassert @stage[1],$reg_enable @reg_data_out[0:31] 0x10100000[0:31]
@mem_data_in[0:31] = AND{32} @stage[1], $mem_enable, 0x04100004[0:31] ;	MOV R1, [R0+4]
#testassert @stage[1],$mem_enable @mem_addr[0:31] 0x00000004[0:31]
#testassert @stage[1],$mem_enable $mem_write 0
@mem_data_in[0:31] = AND{32} @stage[2], $mem_enable, 0x12345678[0:31] ;	0x12345678 = [R0+4]
#testassert @stage[2],$mem_enable @mem_addr[0:31] 0x10100004[0:31]
#testassert @stage[2],$mem_enable $mem_write 0
@mem_data_in[0:31] = AND{32} @stage[3], $mem_enable, 0x44100000[0:31] ;	MOV [R0], R1
#testassert @stage[3],$mem_enable @mem_addr[0:31] 0x00000008[0:31]
#testassert @stage[3],$mem_enable $mem_write 0
                                                                      ; [R0] = 0x12345678
#testassert @stage[4],$mem_enable @mem_data_out[0:31] 0x12345678[0:31]
#testassert @stage[4],$mem_enable @mem_addr[0:31] 0x10100000[0:31]
#testassert @stage[4],$mem_enable $mem_write 1

#testcomplete @stage[5]

#endtestcase

//
// Undefined instruction handling / Move Reg = Ctrl Reg
//
#testcase 400 "CPU - #UD+MRC"
__CPU32_TEST_WRAPPER 1
__stage 6, 0

$mem_ready = PULSE $mem_enable
$reg_ready = PULSE $reg_enable

@mem_data_in[0:31] = AND{32} @stage[0], $mem_enable, 0x8E00001F[0:31]	; JMP 0x80
#testassert @stage[0],$mem_enable @mem_addr[0:31] 0x00000000[0:31]
@mem_data_in[0:31] = AND{32} @stage[1], $mem_enable, 0xFFFFFFFF[0:31]	; UD_N1
#testassert @stage[1],$mem_enable @mem_addr[0:31] 0x00000080[0:31]
@reg_data_in[0:31] = AND{32} @stage[1], $reg_enable, 0x12345678[0:31]
#testassert @stage[1],$reg_enable @reg_addr[0:3] 13[0:3]
@mem_data_in[0:31] = AND{32} @stage[2], $mem_enable, 0xB8010101[0:31]	; MOV R1, CR0
#testassert @stage[2],$mem_enable @mem_addr[0:31] 0x0000008[0:31]
#testassert @stage[2],$reg_enable @reg_addr[0:3] 1[0:3]
#testassert @stage[2],$reg_enable $reg_write 1
#testassert @stage[2],$reg_enable @reg_data_out[0:31] 0x00000084[0:31]
@mem_data_in[0:31] = AND{32} @stage[3], $mem_enable, 0xB8010111[0:31]	; MOV R1, CR1
#testassert @stage[3],$mem_enable @mem_addr[0:31] 0x000000C[0:31]
#testassert @stage[3],$reg_enable @reg_addr[0:3] 1[0:3]
#testassert @stage[3],$reg_enable $reg_write 1
#testassert @stage[3],$reg_enable @reg_data_out[0:31] 0xFFFFFFFF[0:31]
@mem_data_in[0:31] = AND{32} @stage[4], $mem_enable, 0xB8010162[0:31]	; MOV R2, CR6
#testassert @stage[4],$mem_enable @mem_addr[0:31] 0x0000010[0:31]
#testassert @stage[4],$reg_enable @reg_addr[0:3] 2[0:3]
#testassert @stage[4],$reg_enable $reg_write 1
#testassert @stage[4],$reg_enable @reg_data_out[0:31] 0x12345678[0:31]
// TODO: Test CR7=Flags

#testcomplete @stage[5]
#endtestcase

#testcase 600 "CPU - Shifts"
__CPU32_TEST_WRAPPER 1
__stage 5, 0

$flags_C = @flags[0]
$flags_C_clear = @flags_clear[0]

$NULL, $CF_set  = LATCH 1, $ins_end, $flags_C
$NULL, $CF_clrd = LATCH 1, $ins_end, $flags_C_clear

$mem_ready = PULSE $mem_enable
$reg_ready = PULSE $reg_enable

// Shift Left 16
@mem_data_in[0:31] = AND{32} @stage[0], $mem_enable, 0xB802FEB0[0:31]
#testassert @stage[0],$mem_enable @mem_addr[0:31] 0x00000000[0:31]
@reg_data_in[0:31] = AND{32} @stage[0], $reg_enable, 0x12345678[0:31]
#testassert @stage[0],$reg_enable @reg_addr[1:3] 0xE[1:3]
#testassert @stage[0],$reg_write @reg_data_out[0:31] 0x00001234[0:31]
#testassert @stage[0],$reg_write @reg_addr[0:3] 0xF[0:3]
#testassert @stage[0],$ins_end $CF_set  0
#testassert @stage[0],$ins_end $CF_clrd 0

// Rotate Left 16
@mem_data_in[0:31] = AND{32} @stage[1], $mem_enable, 0xB803FEB0[0:31]
#testassert @stage[1],$mem_enable @mem_addr[0:31] 0x00000004[0:31]
@reg_data_in[0:31] = AND{32} @stage[1], $reg_enable, 0x12345678[0:31]
#testassert @stage[1],$reg_enable @reg_addr[1:3] 0xE[1:3]
#testassert @stage[1],$reg_write @reg_data_out[0:31] 0x56781234[0:31]
#testassert @stage[1],$reg_write @reg_addr[0:3] 0xF[0:3]
#testassert @stage[1],$ins_end $CF_set  0
#testassert @stage[1],$ins_end $CF_clrd 0

// Rotate via Carry Left 16
@mem_data_in[0:31] = AND{32} @stage[2], $mem_enable, 0xB803FEF0[0:31]
#testassert @stage[2],$mem_enable @mem_addr[0:31] 0x00000008[0:31]
@reg_data_in[0:31] = AND{32} @stage[2], $reg_enable, 0x12345678[0:31]
#testassert @stage[2],$reg_enable @reg_addr[1:3] 0xE[1:3]
#testassert @stage[2],$reg_write @reg_data_out[0:31] 0x5678091A[0:31]
#testassert @stage[2],$reg_write @reg_addr[0:3] 0xF[0:3]
#testassert @stage[2],$ins_end $CF_set  0
#testassert @stage[2],$ins_end $CF_clrd 1 

// TODO: Another test

#testcomplete @stage[4]
#endtestcase

#testcase 300 "CPU - Stack"
__CPU32_TEST_WRAPPER 1
__stage 4, 4

$mem_ready = PULSE $mem_enable
$reg_ready = PULSE $reg_enable

; PUSH 0xABCDE
__memrd 0,0, 0x00000000, 0xB10ABCDE
@reg_data_in[0:31] = AND{32} @stage[0], $reg_enable, 0x10000000[0:31]
#testassert @stage[0],$reg_write @reg_data_out[0:31] 0x0FFFFFFC[0:31]
__memwr 0,1, 0x10000000, 0x000ABCDE
#testassert @stage[0],$ins_end @op_stage[2] 1	; Ensure all memory operations happened

#testassert @stage[1],$mem_enable @mem_addr[0:31] 0x4[0:31]

; POP [PC+4]
__memrd 2,0, 0x00000008, 0xB6100004

@reg_data_in[0:31] = AND{32} @stage[2],$reg_enable, 0x0FFFFFFC[0:31]
#testassert @stage[2],$reg_enable @reg_addr[0:3] 13[0:3]
#testassert @stage[2],$reg_write @reg_data_out[0:31] 0x10000000[0:31]
__memrd 2,1, 0x0FFFFFFC, 0xB10ABCDE	; Read
__memwr 2,2, 0x00000010, 0xB10ABCDE	; Write back
#testassert @stage[2],$ins_end @op_stage[3] 1	; Ensure all memory operations happened

#testassert @stage[3],$mem_enable @mem_addr[0:31] 0xC[0:31]

#testcomplete (AND @stage[3], $mem_enable)
#endtestcase

#testcase 800 "CPU - NWLS"
__CPU32_TEST_WRAPPER 1
__stage 10, 3

$mem_ready = PULSE $mem_enable
// Because lazy
$reg_ready,@reg_data_in = REGISTER_BANK_16_32 $reg_enable,@reg_addr,$reg_write,@reg_data_out

__memrd 0,0, 0x00000000, 0x8E00001F	; JMP .+0x7C (0x80)
#display 1 "op_stage" @op_stage
#testassert @stage[0],$ins_end @op_stage[1] 1	; Ensure only one memory access

__memrd 1,0, 0x00000080, 0x01F10000	; MOV R15, 0x10000
#testassert @stage[1],$ins_end @op_stage[1] 1	; Ensure only one memory access

__memrd 2,0, 0x00000084, 0xC5CF0002	; LDRHS R12, [R15 + 2]
__memrd16 2,1, 0x00010002, 0xFEED	; 0x10002 = 0xFEED
#testassert @stage[2],$reg_write @reg_data_out[0:31] 0xFFFFFEED[0:31]
#testassert @stage[2],$ins_end @op_stage[2] 1	; Ensure two mem accesses

__memrd 3,0, 0x00000088, 0xC7CFFFFF	; LDRBS R12, [R15 - 1]
__memrd8 3,1, 0x0000FFFF, 0xFE  	; 0xFFFF = 0xFE
#testassert @stage[3],$reg_write @reg_data_out[0:31] 0xFFFFFFFE[0:31]
#testassert @stage[3],$ins_end @op_stage[2] 1	; Ensure two mem accesses

__memrd 4,0, 0x0000008C, 0xC6CFFFFE	; LDRBZ R12, [R15 - 2]
__memrd8 4,1, 0x0000FFFE, 0xED  	; 0xFFFE = 0xED
#testassert @stage[4],$reg_write @reg_data_out[0:31] 0x000000ED[0:31]
#testassert @stage[4],$ins_end @op_stage[2] 1	; Ensure two mem accesses

__memrd 5,0, 0x00000090, 0xCFCF0001	; LDRB R12.3, [R15 + 1]
__memrd8 5,1, 0x00010001, 0x82  	; 0x10001 = 0x82
#testassert @stage[5],$reg_write @reg_data_out[0:31] 0x820000ED[0:31]
#testassert @stage[5],$ins_end @op_stage[2] 1	; Ensure two mem accesses

__memrd 6,0, 0x00000094, 0xC1CF0004	; LDRH R12.0, [R15 + 4]
__memrd16 6,1, 0x00010004, 0x1234	; 0x10004 = 0x1234
#testassert @stage[6],$reg_write @reg_data_out[0:31] 0x82001234[0:31]
#testassert @stage[6],$ins_end @op_stage[2] 1	; Ensure two mem accesses

__memrd 7,0, 0x00000098, 0xC2CF0008	; STRH R12.1, [R15 + 8]
__memwr16 7,1, 0x00010008, 0x8200	; 0x10008 := 0x8200
#testassert @stage[7],$ins_end @op_stage[2] 1	; Ensure two mem accesses

__memrd 8,0, 0x0000009C, 0xCACF0009	; STRB R12.1, [R15 + 9]
__memwr8 8,1, 0x00010009, 0x12	; 0x10009 := 0x12
#testassert @stage[8],$ins_end @op_stage[2] 1	; Ensure two mem accesses

#testcomplete @stage[9]

#endtestcase

; vim: ft=logiccircuit
