//
// 32-bit CPU
// By John Hodge (thePowersGang)
//
// instructions.cct
// - Complex instruction components

// ====================================================================
// Non-word Load/Store
// ====================================================================
#defunit CPU32_NWLS
#input $is_NONWLS,$stage0,@stage_state[4], @instr[28], $mem_ready,@mem_data_in[32], $reg_ready,@reg_data_in[32]
#output $next_instruction, $next_stage, $mem_enable,@mem_addr[32],@mem_size[2], $mem_write,@mem_data_out[32],\
	$reg_enable, @reg_addr[4], $reg_write,@reg_data_out[32]

#array _nwls_basereg	4
#array _nwls_datareg	4
#array _nwls_offset	32
#array _nwls_regofs	4
#block "Decode"
@_nwls_basereg = @instr[16:19]
@_nwls_datareg = @instr[20:23]
$_nwls_offset_sign = @instr[15]
@_nwls_offset[0:15] = @instr[0:15] \\ @_nwls_offset[16:31] = $_nwls_offset_sign*16
$_nwls_LDRHx = AND $is_NONWLS, (XNOR{3,2} @instr[27:25], 0b010[2:0])
$_nwls_LDRBx = AND $is_NONWLS, (XNOR{3,2} @instr[27:25], 0b011[2:0])
$_nwls_LDRH = AND $is_NONWLS, (XNOR{3,2} @instr[27:26],@instr[24], 0b001[2:0])
$_nwls_LDRB = AND $is_NONWLS, (XNOR{2,2} @instr[27],@instr[24], 0b11[1:0])
$_nwls_LDRHB = OR $_nwls_LDRH, $_nwls_LDRB
$_nwls_STRH = AND $is_NONWLS, (XNOR{3,2} @instr[27:26],@instr[24], 0b000[2:0])
$_nwls_STRB = AND $is_NONWLS, (XNOR{2,2} @instr[27],@instr[24], 0b10[1:0])
$_nwls_STRHB = OR $_nwls_STRH, $_nwls_STRB
$_nwls_byteop = AND $is_NONWLS, @instr[27]
$_nwls_byteop = AND $is_NONWLS, $_nwls_LDRBx
$_nwls_hwordop = AND $is_NONWLS, (XNOR{2,2} @instr[27:26], 0b00[1:0])
$_nwls_hwordop = AND $is_NONWLS, $_nwls_LDRHx
@_nwls_regofs = DEMUX{2} $is_NONWLS, @instr[25:26]
#endblock
// - Get Address (Stage 2)
#block "Get Address"
#array _nwls_baseaddr	32
#array _nwls_addr	32
#display $is_NONWLS "NWLS Addr = 0x%32x" @_nwls_addr[31:0]
$NULL, @_nwls_addr = LATCH{32} 1, $stage0, @_nwls_addr
$_nwls_getaddr = AND $is_NONWLS, @stage_state[0]
$reg_enable = PULSE $_nwls_getaddr
@reg_addr = AND{4} $_nwls_getaddr, @_nwls_basereg
$_nwls_startadd = AND $_nwls_getaddr, $reg_ready
@_nwls_baseaddr = AND{32} $_nwls_getaddr, $reg_ready, @reg_data_in
#display $_nwls_startadd "NWLS Base Address = 0x%32x" @_nwls_baseaddr[31:0]
#display $_nwls_startadd "NWLS Offset = 0x%32x" @_nwls_offset[31:0]
$_nwls_add_complete, @_nwls_addr, $NULL = ADDER_32BIT $_nwls_startadd, @_nwls_baseaddr, @_nwls_offset, 0
#display $_nwls_add_complete "NWLS Address = 0x%32x" @_nwls_addr[31:0]
next_stage NWLSGetAddr, "next_stage (NWLS Get Address)", PULSE $_nwls_add_complete
#endblock
// - GP load section (Stage 3/4)
#block "General Purpose Load"
#array _nwls_rdbyte 4
#array _nwls_rdword 2
#array _nwls_data 32
$NULL, @_nwls_data = LATCH{32} 1, $stage0, @_nwls_data	// (ab)use ALU destination latch
$mem_enable = PULSE $_nwls_doread
@mem_addr = AND{32} $_nwls_doread, @_nwls_addr
#display $_nwls_doread "RDWord: %2b, RDByte: %4b" @_nwls_rdword, @_nwls_rdbyte
@_nwls_rdword = DEMUX{1} $_nwls_hwordop, @_nwls_addr[1]
@_nwls_rdbyte = DEMUX{2} $_nwls_byteop, @_nwls_addr[0:1]
@mem_size = AND{2} $_nwls_doread, $_nwls_byteop, 0b10[0:1]
@_nwls_data[0:7] = AND{8} $_nwls_doread, @_nwls_rdbyte[0], $mem_ready, @mem_data_in[ 0: 7]
@_nwls_data[0:7] = AND{8} $_nwls_doread, @_nwls_rdbyte[1], $mem_ready, @mem_data_in[ 8:15]
@_nwls_data[0:7] = AND{8} $_nwls_doread, @_nwls_rdbyte[2], $mem_ready, @mem_data_in[16:23]
@_nwls_data[0:7] = AND{8} $_nwls_doread, @_nwls_rdbyte[3], $mem_ready, @mem_data_in[24:31]
@mem_size = AND{2} $_nwls_doread, $_nwls_hwordop, 0b01[0:1]
@_nwls_data[0:15] = AND{16} $_nwls_doread, @_nwls_rdword[0], $mem_ready, @mem_data_in[ 0:15]
@_nwls_data[0:15] = AND{16} $_nwls_doread, @_nwls_rdword[1], $mem_ready, @mem_data_in[16:31]
$_nwls_datardy = AND (OR @stage_state[1],@stage_state[2]), (OR $_nwls_hwordop, $_nwls_byteop), $mem_ready
#display $_nwls_datardy "NWLS Data = %16x" @_nwls_data[15:0]
next_stage NWLSMemReady, "next_stage (NWLS Memory Ready)", $_nwls_datardy
#endblock
// - Handle Zero/Sign extend load
//  > Half-word
#block "16-bit Extended Load"
$_nwls_doread = AND $_nwls_LDRHx, @stage_state[1]
$_nwls_ldrhx_save = AND $_nwls_LDRHx, @stage_state[2]
$_nwls_ldrhx_sgn = AND @instr[24], @_nwls_data[15]
$reg_enable = PULSE $_nwls_ldrhx_save
@reg_addr = AND{4} $_nwls_ldrhx_save, @_nwls_datareg
$reg_write = PULSE $_nwls_ldrhx_save
@reg_data_out = AND{32} $_nwls_ldrhx_save, @_nwls_data[0:15], $_nwls_ldrhx_sgn*16
next_instruction LDRHx, "next_instruction (NWLS Half Extended)", DELAY{4} $_nwls_ldrhx_save
#endblock
//  > Byte
#block "8-bit Extended Load"
$_nwls_doread = AND $_nwls_LDRBx, @stage_state[1]
$_nwls_ldrbx_save = AND $_nwls_LDRBx, @stage_state[2]
$_nwls_ldrbx_sgn = AND @instr[24], @_nwls_data[7]
$reg_enable = PULSE $_nwls_ldrbx_save
@reg_addr = AND{4} $_nwls_ldrbx_save, @_nwls_datareg
$reg_write = PULSE $_nwls_ldrbx_save
@reg_data_out = AND{32} $_nwls_ldrbx_save, @_nwls_data[0:7], $_nwls_ldrbx_sgn*24
next_instruction LDRBx, "next_instruction (NWLS Byte Extended)", DELAY{4} $_nwls_ldrbx_save
#endblock
// - Handle non-extended load
#array _nwls_regval	32
#block "Non-extended Load"
$NULL, @_nwls_regval = LATCH{32} 1, $stage0, @_nwls_regval
$_nwls_doread = AND $_nwls_LDRHB, @stage_state[1]
// next_stage NWLSMemReady
$_nwls_regread = AND $_nwls_LDRHB, @stage_state[2]
$reg_enable = PULSE $_nwls_regread
@reg_addr = AND{4} $_nwls_regread, @_nwls_datareg
@_nwls_regval = AND{32} $_nwls_regread,$reg_ready, @reg_data_in
next_stage NWLSRegRead, "next_stage (NWLS Register Read)", AND $_nwls_regread,$reg_ready
$_nwls_ldrhb_save = AND $_nwls_LDRHB, @stage_state[3]
$reg_enable = PULSE $_nwls_ldrhb_save
@reg_addr = AND{4} $_nwls_ldrhb_save, @_nwls_datareg
$reg_write = PULSE $_nwls_ldrhb_save
//  > Half-word
#block "16-bit"
$_nwls_ldrh_save = AND $_nwls_LDRH, @stage_state[3]
@reg_data_out = AND{32} $_nwls_ldrh_save,@_nwls_regofs[0], @_nwls_data[0:15],@_nwls_regval[16:31]
@reg_data_out = AND{32} $_nwls_ldrh_save,@_nwls_regofs[1], @_nwls_regval[0:15],@_nwls_data[0:15]
next_instruction LDRH, "next_instruction (LDRH)", AND $_nwls_ldrh_save,$reg_ready
#endblock
//  > Byte
#block "8-bit"
$_nwls_ldrb_save = AND $_nwls_LDRB, @stage_state[3]
@reg_data_out = AND{32} $_nwls_ldrb_save,@_nwls_regofs[0], @_nwls_data[0:7],@_nwls_regval[8:31]
@reg_data_out = AND{32} $_nwls_ldrb_save,@_nwls_regofs[1], @_nwls_regval[0:7],@_nwls_data[0:7],@_nwls_regval[16:31]
@reg_data_out = AND{32} $_nwls_ldrb_save,@_nwls_regofs[2], @_nwls_regval[0:15],@_nwls_data[0:7],@_nwls_regval[24:31]
@reg_data_out = AND{32} $_nwls_ldrb_save,@_nwls_regofs[3], @_nwls_regval[0:23],@_nwls_data[0:7]
next_instruction LDRB, "next_instruction (LDRB)", AND $_nwls_ldrb_save,$reg_ready
#endblock
#endblock
// - Handle stores
#block "Store"
$_nwls_strhb_load = AND $_nwls_STRHB, @stage_state[1]
$reg_enable = PULSE $_nwls_strhb_load
@reg_addr =  AND{4} $_nwls_strhb_load, @_nwls_datareg
$_nwls_strhb_write = AND $_nwls_STRHB, @stage_state[2]
$mem_enable = PULSE $_nwls_strhb_write
@mem_addr = AND{32} $_nwls_strhb_write, @_nwls_addr
$mem_write = PULSE $_nwls_strhb_write
//  > Half-word
$_nwls_strh_load = AND $_nwls_STRH, @stage_state[1]
@_nwls_data[0:15] = AND{16} $_nwls_strh_load,$reg_ready,@_nwls_regofs[0], @reg_data_in[0:15]
@_nwls_data[0:15] = AND{16} $_nwls_strh_load,$reg_ready,@_nwls_regofs[1], @reg_data_in[16:31]
next_stage STRH, "next_stage (NWLS Halfword Ready)", AND $_nwls_strh_load,$reg_ready
$_nwls_strh_write = AND $_nwls_STRH, @stage_state[2]
@mem_size = AND{2} $_nwls_strh_write, 0b01[0:1]
@mem_data_out = AND{32} $_nwls_strh_write, @_nwls_data[0:15],@_nwls_data[0:15]
next_instruction STRW, "next_instruction (STRW)", AND $_nwls_strh_write,$mem_ready
//  > Byte
$_nwls_strb_load = AND $_nwls_STRB, @stage_state[1]
@_nwls_data[0:7] = AND{8} $_nwls_strb_load,$reg_ready,@_nwls_regofs[0], @reg_data_in[0:7]
@_nwls_data[0:7] = AND{8} $_nwls_strb_load,$reg_ready,@_nwls_regofs[1], @reg_data_in[8:15]
@_nwls_data[0:7] = AND{8} $_nwls_strb_load,$reg_ready,@_nwls_regofs[2], @reg_data_in[16:23]
@_nwls_data[0:7] = AND{8} $_nwls_strb_load,$reg_ready,@_nwls_regofs[3], @reg_data_in[24:31]
next_stage STRB, "next_stage (NWLS Byte Ready)", AND $_nwls_strb_load,$reg_ready
$_nwls_strb_write = AND $_nwls_STRB, @stage_state[2]
@mem_size = AND{2} $_nwls_strb_write, 0b10[0:1]
@mem_data_out = AND{32} $_nwls_strb_write, @_nwls_data[0:7],@_nwls_data[0:7],@_nwls_data[0:7],@_nwls_data[0:7]
next_instruction STRB, "next_instruction (STRB)", AND $_nwls_strb_write,$mem_ready
#endblock
#endunit

// ====================================================================
// Shift/Rotate
// ====================================================================
#defunit CPU32_SHIFT
#input $is_SHIFT,$stage0,@stage_state[4], @instr[17], $reg_ready,@reg_data_in[32], $flags_C
#output $next_instruction, $next_stage, $reg_enable, @reg_addr[4], $reg_write,@reg_data_out[32], $flags_C_clear, $flags_C_set

#array _shift_count 5
#array _shift_value 33
#array _shift_value_nc 32
#array _shift_out 33
#array _shift_out_nc 32
$NULL, @_shift_count = LATCH{5} 1, $stage0, @_shift_count
$NULL, @_shift_value = LATCH{33} 1, $stage0, @_shift_value
$NULL, @_shift_value_nc = LATCH{32} 1, $stage0, @_shift_value_nc
#display $is_SHIFT "_shift_count = 0x%5x" @_shift_count[4:0]
$_shift_dir_left  = NOT   @instr[7]
$_shift_dir_right = DELAY @instr[7]
$_shift_no_cf  = NOT   @instr[6]
$_shift_use_cf = DELAY @instr[6]
$_shift_is_shift  = NOT   @instr[16]
$_shift_is_rotate = DELAY @instr[16]
$_shift_reg_count = NOT   @instr[5]
$_shift_imm_count = DELAY @instr[5]
// Prepare arguments
// - Count imm5
@_shift_count[0:4] = AND{5} $is_SHIFT, $_shift_imm_count, @instr[0:4]
next_stage ShiftImm5, "next_stage (Shift Imm5)", AND $is_SHIFT, @stage_state[0], $_shift_imm_count
// - Count r
$_shift_readRv = AND $is_SHIFT, @stage_state[0], $_shift_reg_count
$reg_enable = PULSE $_shift_readRv
@reg_addr[0:3] = AND{4} $_shift_readRv, @instr[0:3]
@_shift_count[0:4] = AND{5} $_shift_readRv, $reg_ready, @reg_data_in[0:4]
next_stage ShiftRv, "next_stage (Shift Rv)", AND $_shift_readRv, $reg_ready
// - Value
$_shift_value_reading = AND $is_SHIFT, @stage_state[1]
$reg_enable = PULSE $_shift_value_reading
@reg_addr[0:3] = AND{4} $_shift_value_reading, @instr[8:11]
#display $_shift_value_reading,$reg_ready "Shift reg in: %32x" @reg_data_in[31:0]
@_shift_value[0:32] = AND{33} $_shift_value_reading,$reg_ready,$_shift_dir_left,  $flags_C,@reg_data_in[0:31]
@_shift_value[0:32] = AND{33} $_shift_value_reading,$reg_ready,$_shift_dir_right, @reg_data_in[31:0],$flags_C
@_shift_value_nc[0:31] = AND{32} $_shift_value_reading,$reg_ready,$_shift_dir_left,  @reg_data_in[0:31]
@_shift_value_nc[0:31] = AND{32} $_shift_value_reading,$reg_ready,$_shift_dir_right, @reg_data_in[31:0]
next_stage ShiftVal, "next_stage (Shift Value)", AND $_shift_value_reading, $reg_ready
// Clear CF if it is used
$flags_C_clear = PULSE (AND $is_SHIFT, @stage_state[2], $_shift_use_cf)
$_shl_enable = AND $is_SHIFT, @stage_state[2], $_shift_is_shift
;$_shl_enable = AND $is_SHIFT, @stage_state[2], (NOT   @instr[16]), $_shift_no_cf
;$_scl_enable = AND $is_SHIFT, @stage_state[2], (NOT   @instr[16]), $_shift_use_cf
$_rol_enable = AND $is_SHIFT, @stage_state[2], $_shift_is_rotate, $_shift_no_cf
$_rcl_enable = AND $is_SHIFT, @stage_state[2], $_shift_is_rotate, $_shift_use_cf
// Perform shift
#display $_shl_enable "SHL: _shift_value = %33x" @_shift_value[32:0]
;#display $_scl_enable "SCL: _shift_value = %33x" @_shift_value
;#display $_shl_enable "SHL: _shift_value = %32x" @_shift_value_nc
#display $_rcl_enable "RCL: _shift_value = %33x" @_shift_value[32:0]
#display $_rol_enable "ROL: _shift_value = %32x" @_shift_value_nc[31:0]
$_shift_done, @_shift_out    = SHIFT_LEFT_N_32  $_shl_enable, @_shift_count, @_shift_value
$_shift_done, @_shift_out    = ROTATE_LEFT_N_33 $_rcl_enable, @_shift_count, @_shift_value
$_shift_done, @_shift_out_nc = ROTATE_LEFT_N_32 $_rol_enable, @_shift_count, @_shift_value_nc
next_stage ShiftDone, "next_stage (Shift Done)", $_shift_done
#display $_shift_done,$_shift_dir_left  "_shift_out CL = %32x,C=%1b" @_shift_out[32:1],@_shift_out[0]
#display $_shift_done,$_shift_dir_right "_shift_out CR = %32x,C=%1b" @_shift_out[0:31],@_shift_out[32]
#display $_shift_done,$_shift_dir_left  "_shift_out -L = %32x" @_shift_out_nc[31:0]
#display $_shift_done,$_shift_dir_right "_shift_out -R = %32x" @_shift_out_nc[0:31]
// Write back shifted value
$_shift_writeback = AND $is_SHIFT, @stage_state[3]
$reg_write = PULSE $_shift_writeback
@reg_addr[0:3] = AND{4} $_shift_writeback, @instr[12:15]
$reg_enable = PULSE $_shift_writeback
$flags_C_set,@reg_data_out[0:31] = AND{33} $_shift_writeback,$_shift_dir_left,  @_shift_out[0:32]
@reg_data_out[31:0],$flags_C_set = AND{33} $_shift_writeback,$_shift_dir_right, @_shift_out[0:32]
@reg_data_out[0:31] = AND{32} $_shift_writeback,$_shift_dir_left,  @_shift_out_nc[0:31]
@reg_data_out[31:0] = AND{32} $_shift_writeback,$_shift_dir_right, @_shift_out_nc[0:31]
// Operation complete
next_instruction Shift, "next_instruction (Shift)", DELAY{5} $_shift_writeback

#endunit

; vim: ft=logiccircuit
